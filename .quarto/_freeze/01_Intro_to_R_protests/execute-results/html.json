{
  "hash": "ef584a151134c56e410d393b98559062",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R\"\nauthor:\n- affiliation: University of Pennsylvania\n  email: gridge@upenn.edu\n  name: Greg Ridgeway\ndate: \"August 14, 2025\"\nformat:\n  html:\n    theme: \n      dark: darkly\n      light: default\n    toc: true\n    html-math-method: mathjax\n  pdf:\n    toc: true\nprefer-html: true\nnumber-sections: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n<!-- In terminal -->\n<!-- quarto render 01_Intro_to_R_protests.qmd -->\n\n<!-- git commit 01-* -m \"commit message\" -->\n<!-- git status -->\n<!-- git push -->\n\n\n\n<!-- A function for automating the numbering and wording of the exercise questions -->\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n# Introduction\n\nThis is the first set of notes for an introduction to R programming from criminology and criminal justice. These notes assume that you have the latest version of R and R Studio installed. We are also assuming that you know how to start a new script file and submit code to the R console. From that basic knowledge about using R, we are going to start with `2+2` and by the end of this set of notes you will load in a dataset on protests in the United States (mostly), create a few plots, count some incidents, and be able to do some basic data manipulations. Our aim is to build a firm foundation on which we will build throughout this set of notes.\n\nR sometimes provides useful help as to how to do something, such as choosing the right function or figuring what the syntax of a line of code should be. Let's say we're stumped as to what the `sqrt()` function does. Just type `?sqrt` at the R prompt to read documentation on `sqrt()`. Most help pages have examples at the bottom that can give you a better idea about how the function works. R has over 7,000 functions and an often seemingly inconsistent syntax. As you do more complex work with R (such as using new packages), the Help tab can be useful. \n\n# Basic Math and Functions in R\n\nR, on a very unsophisticated level, is like a calculator. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n1*2*3*4\n(1+2+3-4)/(5*7)\nsqrt(2)\n(1+sqrt(5))/2 # golden ratio\n2^3\nlog(2.718281828)\nround(2.718281828,3)\n12^2 \nfactorial(4)\nabs(-4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n[1] 24\n[1] 0.05714286\n[1] 1.414214\n[1] 1.618034\n[1] 8\n[1] 1\n[1] 2.718\n[1] 144\n[1] 24\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n# Combining values together into a collection (or vector)\n\nWe will use the `c()` function a lot. `c()` *c*ombines elements, like numbers and text to form a vector or a collection of values. If we wanted to combine the numbers 1 to 5 we could do\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3,4,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\nWith the `c()` function, it's important to separate all of the items with commas. \n\nConveniently, if you want to add 1 to each item in this collection, there's no need to add 1 like `c(1+1,2+1,3+1,4+1,5+1)`... that's a lot of typing. Instead R offers the shortcut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3,4,5)+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\n\nIn fact, you can apply any mathematical operation to each value in the same way.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3,4,5)*2\nsqrt(c(1,2,3,4,5))\n(c(1,2,3,4,5)-3)^2\nabs(c(-1,1,-2,2,-3,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10\n[1] 1.000000 1.414214 1.732051 2.000000 2.236068\n[1] 4 1 0 1 4\n[1] 1 1 2 2 3 3\n```\n\n\n:::\n:::\n\n\n\n\nNote in the examples below that you can also have a collection of non-numerical items. When combining text items, remember to use quotes around each item.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"CRIM6000\",\"CRIM6001\",\"CRIM6002\",\"CRIM6003\")\nc(\"yes\",\"no\",\"no\",NA,NA,\"yes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"CRIM6000\" \"CRIM6001\" \"CRIM6002\" \"CRIM6003\"\n[1] \"yes\" \"no\"  \"no\"  NA    NA    \"yes\"\n```\n\n\n:::\n:::\n\n\n\nIn R, `NA` means a missing value. We'll do more exercises later using data containing some `NA` values. In any dataset in the wild, you are virtually guaranteed to find some `NA`s. The function `is.na()` helps determine whether there are any missing values (any NAs). In some of the problems below, we will use `is.na()`.\n\nYou can use double quotes or single quotes in R as long as you are consistent. When you have quotes inside the text you need to be particularly careful.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Lou Gehrig's disease\"\n'The officer shouted \"halt!\"'\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Lou Gehrig's disease\"\n[1] \"The officer shouted \\\"halt!\\\"\"\n```\n\n\n:::\n:::\n\n\n\nThe backslashes in the above text \"protect\" the double quote, communicating to you and to R that the next double quote is not the end of the text, but a character that is actually part of the text you want to keep.\n\nThe `c()` function is not the only way to make a collection of values in R. For example, placing a `:` between two numbers can return a collection of numbers in sequence. The functions `rep()` and `seq()` produce repeated values or sequences.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10\n5:-5\nc(1,1,1,1,1,1,1,1,1,1)\nrep(1,10)\nrep(c(1,2),each=5)\nseq(1, 5)\nseq(1, 5, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n [1]  5  4  3  2  1  0 -1 -2 -3 -4 -5\n [1] 1 1 1 1 1 1 1 1 1 1\n [1] 1 1 1 1 1 1 1 1 1 1\n [1] 1 1 1 1 1 2 2 2 2 2\n[1] 1 2 3 4 5\n[1] 1 3 5\n```\n\n\n:::\n:::\n\n\n\n\nR will also do arithmetic with two vectors, doing the calculation pairwise. The following will compute 1+11 and 2+12 up to 10+20.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10 + 11:20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 12 14 16 18 20 22 24 26 28 30\n```\n\n\n:::\n:::\n\n\n\nYet, other functions operate on the whole collection of values in a vector. See the following examples:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(c(1,10,3,6,2,5,8,4,7,9)) # sum\nlength(c(1,10,3,6,2,5,8,4,7,9)) # how many?\ncumsum(c(1,10,3,6,2,5,8,4,7,9)) # cumulative sum\nmean(c(1,10,3,6,2,5,8,4,7,9)) # mean of collection of 10 numbers\nmedian(c(1,10,3,6,2,5,8,4,7,9)) # median of same population\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55\n[1] 10\n [1]  1 11 14 20 22 27 35 39 46 55\n[1] 5.5\n[1] 5.5\n```\n\n\n:::\n:::\n\n\n\nThere are also some functions in R that help us find the biggest and smallest values. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(c(1,10,3,6,2,5,8,4,7,9)) # what is the biggest value in vector?\nwhich.max(c(1,10,3,6,2,5,8,4,7,9)) # in which \"spot\" would we find it?\nmin(c(1,10,3,6,2,5,8,4,7,9)) # what is the smallest value in vector?\nwhich.min(c(1,10,3,6,2,5,8,4,7,9)) # in which \"spot\" would we find it?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n[1] 2\n[1] 1\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n\n# Setting the working directory\nNow that we have covered a lot of fundamental R features, it is time to load in a real dataset. However, before we do that, R needs to know where to find the data file. So we first need to talk about \"the working directory\". When you start R, it has a default folder or directory on your computer where it will retrieve or save any files. You can run `getwd()` to get the current working directory. Here's our current working directory, which will not be the same as yours.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()    \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/R4crim\"\n```\n\n\n:::\n:::\n\n\n\nAlmost certainly this default directory is *not* where you plan to have all of your datasets and files stored. Instead, you probably have an \"analysis\" or \"project\" or \"R4crim\" folder somewhere on your computer where you would like to store your data and work.\n\nUse `setwd()` to tell R what folder you want it to use as the working directory. If you do not set the working directory, R will not know where to find the data you wish to import and will save your results in a location in which you would probably never look. Make it a habit to have `setwd()` as the first line of every script you write. If you know the working directory you want to use, then you can just put it inside the `setwd()` function.\n```\nsetwd(\"C:/Users/greg_/CRIM6002/notes/R4crim\")    \n```\nNote that for all platforms, Windows, Macs, and Linux, the working directory only uses forward slashes. So Windows users be careful... most Windows applications use backslashes, but in an effort to make R scripts work across all platforms, R requires forward slashes. Backslashes have a different use in R that you will meet later.\n\nIf you do not know how to write your working directory, here comes R Studio to the rescue. In R Studio click Session -> Set Working Directory -> Choose Directory. Then click through to navigate to the working directory that you want to use. When you find it click \"Select Folder\". Then look over at the console. R Studio will construct the right `setwd()` syntax for you. Copy and paste that into your script for use later. No need to have to click through the Session menu again now that you have your `setwd()` set up.\n\nNow you can use R functions to load in any datasets that are in your working folder. If you have done your `setwd()` correctly, you shouldn't get any errors because R will know exactly where to look for the data files. If the working directory that you've given in the `setwd()` isn't right, R will think the file doesn't even exist. For example, if you give the path for, say, your R4econ folder, R won't be able to load data because the file isn't stored in what R thinks is your working directory. With that out of the way, let's load a dataset.\n\n# Loading a first dataset, protests in the United States\n\nWe are going to use a dataset of protests in the United States. The data comes from [CountLove](https://countlove.org/faq.html). The data is a collection of protests that occurred in the United States from 2017 through January 2021. The data includes the date of the protest, the location, the number of attendees, and the reason for the protest. We will load the data and explore it. They stopped collection in February 2021, but you can find more recent crowd data at the [Crowd Counting Consortium](https://ash.harvard.edu/programs/crowd-counting-consortium/).\n\nWe start by loading in the dataset. I have created a .RData file containing the protest data. This is stored in a special format that R can read quickly. The file is called `protests.RData`. We will load this file into R using the `load()` function. Once we have loaded the data, we can see what is in the dataset using the `ls()` function. This will list all the objects in the current environment. If you have just started using R, most likely the only object you see in your environment is `dataProtest`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"protests.RData\")\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"dataProtest\"\n```\n\n\n:::\n:::\n\n\n\n\nTo start exploring the protest data, have a look at how many rows (protests) and how many columns (protest features) are in the dataset. Then use the `head()` function to show the first few rows of the dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many rows?\nnrow(dataProtest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 38097\n```\n\n\n:::\n\n```{.r .cell-code}\n# how many columns?\nncol(dataProtest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(dataProtest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                          Location Attendees\n1 2017-01-15 Bowie State University, Bowie, MD      1500\n2 2017-01-16                  Johnson City, TN       300\n3 2017-01-16                  Indianapolis, IN        20\n4 2017-01-16                    Cincinnati, OH        NA\n5 2017-01-18                      Hartford, CT       300\n6 2017-01-19                    Washington, DC        NA\n             Event..legacy..see.tags.\n1                          Healthcare\n2                        Civil Rights\n3                         Environment\n4      Other (Martin Luther King Jr.)\n5 Healthcare (Pro-Planned Parenthood)\n6                           Executive\n                                                       Tags Curated\n1                       Healthcare; For Affordable Care Act     Yes\n2 Civil Rights; For racial justice; Martin Luther King, Jr.     Yes\n3                  Environment; For wilderness preservation     Yes\n4 Civil Rights; For racial justice; Martin Luther King, Jr.     Yes\n5                        Healthcare; For Planned Parenthood     Yes\n6                         Executive; Against 45th president     Yes\n                                                                                                                                     Source\n1                                                            http://www.capitalgazette.com/news/ph-ac-cn-aca-rally-0116-20170115-story.html\n2 http://www.johnsoncitypress.com/Local/2017/01/16/Hundreds-march-to-honor-Martin-Luther-King-Jr-in-Johnson-City.html?ci=featured&lp=46&ti=\n3                                             http://wishtv.com/2017/01/16/nature-groups-protest-deforestation-of-crown-hill-cemetery-land/\n4                                          http://www.cincinnati.com/picture-gallery/news/2017/01/16/mlk-coalition-march-downtown/96636250/\n5                                                                http://www.realhartford.org/2017/01/19/reproductive-freedom-day-of-action/\n6                                                 https://malvern-online.com/content/melee-near-trumps-parade-route-police-protesters-clash\n  Total.Articles\n1              1\n2              4\n3              1\n4              1\n5              1\n6              1\n```\n\n\n:::\n:::\n\n\n\nWe learn that the dataset has 38097 rows and 8 columns. The `head()` function shows the first few rows of the dataset. The first column is the date of the protest (`Date`), the second is the location (`Location`), and the third is the number of attendees (`Attendees`). The fifth column contains tags describing the purpose of the protest (`Tags`). The other columns contain other details, like links to news articles about the protest. We will not be using these other features.\n\nSome R functionality relies on packages written by others. For certain basic data tasks, such as selecting certain columns, filtering rows, modifying values, and summarizing data, we will use the `dplyr` package (usually pronounced dee-ply-er... intended to evoke pliers for data). If you do not have `dplyr` installed, you can install it by running `install.packages(\"dplyr\")`. This is a one-time installation. Once per R session, you need to load the package using `library()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\n\nNow with `dplyr` loaded we can slice the protest data to just pick our certain rows, like the first row.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice(dataProtest, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                          Location Attendees\n1 2017-01-15 Bowie State University, Bowie, MD      1500\n  Event..legacy..see.tags.                                Tags Curated\n1               Healthcare Healthcare; For Affordable Care Act     Yes\n                                                                          Source\n1 http://www.capitalgazette.com/news/ph-ac-cn-aca-rally-0116-20170115-story.html\n  Total.Articles\n1              1\n```\n\n\n:::\n:::\n\n\n\nThere is a more modern \"grammar\" in R called the pipe operator. This is a way to chain together functions in a more readable way. The pipe operator is `|>`. It takes the output of the function on the left and passes it as the first argument to the function on the right. This is a more modern way to write R code. Here is the same code as above using the pipe operator.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |> slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                          Location Attendees\n1 2017-01-15 Bowie State University, Bowie, MD      1500\n  Event..legacy..see.tags.                                Tags Curated\n1               Healthcare Healthcare; For Affordable Care Act     Yes\n                                                                          Source\n1 http://www.capitalgazette.com/news/ph-ac-cn-aca-rally-0116-20170115-story.html\n  Total.Articles\n1              1\n```\n\n\n:::\n:::\n\n\n\nThis code takes `dataProtest` and passes it in to the first argument of the `slice()` function. The `slice()` function then returns the first row of the dataset. This is a more readable way to write the code. \n\nYou will also see many users using `%>%` in their code. The `%>%` pipe operator has been around longer, but the newer `|>` pipe operator, created in 2021 for R 4.1.0, is [faster](https://michaelbarrowman.co.uk/post/the-new-base-pipe/). You can use either one.\n\nIf you want the first 3 rows you can also use `slice()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |> slice(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                          Location Attendees\n1 2017-01-15 Bowie State University, Bowie, MD      1500\n2 2017-01-16                  Johnson City, TN       300\n3 2017-01-16                  Indianapolis, IN        20\n  Event..legacy..see.tags.\n1               Healthcare\n2             Civil Rights\n3              Environment\n                                                       Tags Curated\n1                       Healthcare; For Affordable Care Act     Yes\n2 Civil Rights; For racial justice; Martin Luther King, Jr.     Yes\n3                  Environment; For wilderness preservation     Yes\n                                                                                                                                     Source\n1                                                            http://www.capitalgazette.com/news/ph-ac-cn-aca-rally-0116-20170115-story.html\n2 http://www.johnsoncitypress.com/Local/2017/01/16/Hundreds-march-to-honor-Martin-Luther-King-Jr-in-Johnson-City.html?ci=featured&lp=46&ti=\n3                                             http://wishtv.com/2017/01/16/nature-groups-protest-deforestation-of-crown-hill-cemetery-land/\n  Total.Articles\n1              1\n2              4\n3              1\n```\n\n\n:::\n:::\n\n\n\nor you can use `head()` that we used earlier.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |> head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                          Location Attendees\n1 2017-01-15 Bowie State University, Bowie, MD      1500\n2 2017-01-16                  Johnson City, TN       300\n3 2017-01-16                  Indianapolis, IN        20\n  Event..legacy..see.tags.\n1               Healthcare\n2             Civil Rights\n3              Environment\n                                                       Tags Curated\n1                       Healthcare; For Affordable Care Act     Yes\n2 Civil Rights; For racial justice; Martin Luther King, Jr.     Yes\n3                  Environment; For wilderness preservation     Yes\n                                                                                                                                     Source\n1                                                            http://www.capitalgazette.com/news/ph-ac-cn-aca-rally-0116-20170115-story.html\n2 http://www.johnsoncitypress.com/Local/2017/01/16/Hundreds-march-to-honor-Martin-Luther-King-Jr-in-Johnson-City.html?ci=featured&lp=46&ti=\n3                                             http://wishtv.com/2017/01/16/nature-groups-protest-deforestation-of-crown-hill-cemetery-land/\n  Total.Articles\n1              1\n2              4\n3              1\n```\n\n\n:::\n:::\n\n\n\nI have the general habit of running `head()` and `tail()` on any datasets I am working with just to make sure it looks like what I expect. I encourage you to do the same. Many errors can be avoided by just looking at the data.\n\nWe may also be interested in only a few columns of the dataset. We can use the `select()` function to pick out the columns we want. For example, if we only want the date and location of the protest, we can use the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |> \n   select(Date, Location) |>\n   head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                          Location\n1 2017-01-15 Bowie State University, Bowie, MD\n2 2017-01-16                  Johnson City, TN\n3 2017-01-16                  Indianapolis, IN\n```\n\n\n:::\n:::\n\n\n\nThis code takes `dataProtest` and passes it to the `select()` function. The `select()` function then returns only the `Date` and `Location` columns of the dataset. `head(3)` then returns the first 3 rows of the dataset. Here you can see how the pipe operator can be used to chain together functions in a readable way. Technically, this code is identical to \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(select(dataProtest, Date, Location), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                          Location\n1 2017-01-15 Bowie State University, Bowie, MD\n2 2017-01-16                  Johnson City, TN\n3 2017-01-16                  Indianapolis, IN\n```\n\n\n:::\n:::\n\n\n\nThe computer does not care which approach you take. However, the potential problem with this code is that there is so much distance between  `head` and the `3` at the end. This distance makes it harder to read, understand, and find errors. It will become even more important when we chain many more functions together.\n\nYou can also get a column by name using the `$` operator. For example, to get the `Date` column you can use `dataProtest$Date`. To get the first 10 dates you can use `dataProtest$Date[1:10]`. To get the first 10 locations you can use `dataProtest$Location[1:10]`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest$Date[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2017-01-15\" \"2017-01-16\" \"2017-01-16\" \"2017-01-16\" \"2017-01-18\"\n [6] \"2017-01-19\" \"2017-01-19\" \"2017-01-20\" \"2017-01-20\" \"2017-01-20\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndataProtest$Location[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Bowie State University, Bowie, MD\"    \n [2] \"Johnson City, TN\"                     \n [3] \"Indianapolis, IN\"                     \n [4] \"Cincinnati, OH\"                       \n [5] \"Hartford, CT\"                         \n [6] \"Washington, DC\"                       \n [7] \"Washington, DC\"                       \n [8] \"University of Washington, Seattle, WA\"\n [9] \"Westlake Park, Seattle, WA\"           \n[10] \"Columbus, OH\"                         \n```\n\n\n:::\n:::\n\n\n\n\nSo far every time we run some R code the results are dumped to the console. This is R's default behavior. If you do not indicate otherwise, it will dump the results to the console and promptly forget those results. When we want to store the results, we can use the assignment operator `<-`. For example, to save the first 10 dates to a variable `a` you can use \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- dataProtest$Date[1:10]\n```\n:::\n\n\n\nTo save the first 10 locations to a variable `b` you can use \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- dataProtest$Location[1:10]\n```\n:::\n\n\n\nNow if we run `ls()` we will see that we have two new variables `a` and `b` in our environment. We can use these variables later in our code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"           \"b\"           \"dataProtest\"\n```\n\n\n:::\n:::\n\n\n\nIf you want to see the contents of a variable you can just type the variable name and run the code. For example, to see the contents of `a` you can run\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2017-01-15\" \"2017-01-16\" \"2017-01-16\" \"2017-01-16\" \"2017-01-18\"\n [6] \"2017-01-19\" \"2017-01-19\" \"2017-01-20\" \"2017-01-20\" \"2017-01-20\"\n```\n\n\n:::\n:::\n\n\n\nIf a line of R code does not have a `<-`, then the results will not be stored. I would like to simplify our protest dataset by removing some columns that we will not use. I will use the `select()` function to pick out the columns to keep *and* use the `<-` operator to replace the original `dataProtest` with a new version of `dataProtest` that only has the columns I want.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest <- dataProtest |>\n   select(Date, Location, Attendees, Tags)\n```\n:::\n\n\n\nNow if you run `head(dataProtest)` you will see that the dataset only has the `Date`, `Location`, `Attendees`, and `Tags` columns. The other columns have been removed. `select()` also allows you to indicate which features to drop by prefixing their names with a minus sign. Instead of listing the features we wanted to keep, we could have listed the features we wanted to drop, using `select(-Event..legacy..see.tags., -Source, -Curated, -Total.Articles)`. \n\n## Exercises\n1. What is the date of the protest in line 10000 of the dataset?\n2. Which protest type is in line 4289 of the dataset?\n\n\n# Filtering rows\n\nWe can ask every location if they equal \"Philadelphia, PA\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# let's just ask the first 10, otherwise will print out the first 1,000 \ndataProtest$Location[1:10]==\"Philadelphia, PA\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n\nNote the use of the double equal sign `==`. This is the \"logical\" equal. It is not making `Location` equal to Philadelphia, PA. It is asking if `Location` is equal to Philadelphia, PA. The result is a vector of `TRUE` and `FALSE` values. If the location is Philadelphia, PA, then the result is `TRUE`. If the location is not Philadelphia, PA, then the result is `FALSE`.\n\nHow many protests occurred in Philadelphia, PA?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(Location==\"Philadelphia, PA\") |>\n   nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 193\n```\n\n\n:::\n:::\n\n\n\nThe `filter()` function is used to select rows that meet a certain condition. In this case, we are selecting rows where the `Location` is equal to \"Philadelphia, PA\". The expression `Location==\"Philadelphia, PA\"` will evaluate to `TRUE` for any row where `Location` is identical to \"Philadelphia, PA\" and `FALSE` otherwise. `filter()` will keep only those rows where the logical expression evaluates to `TRUE` eliminating all others (`NA`s also get eliminated). The `nrow()` function, which we met earlier, is used to count the number of rows in the dataset. The result is the number of protests that occurred in Philadelphia, PA.\n\nHowever, this count does not include those with locations like \"University of Pennsylvania, Philadelphia, PA\". For example, these ones:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(Location==\"University of Pennsylvania, Philadelphia, PA\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                                     Location Attendees\n1 2018-02-22 University of Pennsylvania, Philadelphia, PA       130\n2 2019-04-23 University of Pennsylvania, Philadelphia, PA        10\n3 2019-04-23 University of Pennsylvania, Philadelphia, PA        50\n4 2019-10-23 University of Pennsylvania, Philadelphia, PA        NA\n                                                                 Tags\n1                                       Guns; For greater gun control\n2                                           Other; For animal welfare\n3                                   Other; Against closure/relocation\n4 Immigration; For compassionate immigration; Against invited speaker\n```\n\n\n:::\n:::\n\n\n\nThe `Location` feature has the phrase \"Philadelphia, PA\", but the `Location` is not *exactly* identical to \"Philadelphia, PA\". It is time to introduce you to `grepl()`, which is a very powerful function for searching for patterns in text. For now, we will use it simply to search for any `Location` containing the phrase \"Philadelphia, PA\".  `grepl()` returns `TRUE` if the phrase is found and `FALSE` if it is not found. For example, to find all protests that occurred in Philadelphia, PA, we can use the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n  filter(grepl(\"Philadelphia, PA\", Location)) |>\n  head(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                                             Location Attendees\n1 2017-01-21                                     Philadelphia, PA     50000\n2 2017-01-26                                     Philadelphia, PA      2360\n3 2017-01-29 Philadelphia International Airport, Philadelphia, PA      1910\n4 2017-02-02                                     Philadelphia, PA       800\n5 2017-02-04             Philadelphia City Hall, Philadelphia, PA      2000\n                                             Tags\n1 Civil Rights; For women's rights; Women's March\n2               Executive; Against 45th president\n3                 Immigration; Against travel ban\n4                 Immigration; Against travel ban\n5                 Immigration; Against travel ban\n```\n\n\n:::\n:::\n\n\n\nNow we have found many more protests in Philadelphia since some of them were at the airport or at City Hall. Let's redo that count.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(grepl(\"Philadelphia, PA\", Location)) |>\n   nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 327\n```\n\n\n:::\n:::\n\n\n\nWe will study `grepl()` and its variants a lot more later, but for now think of it as \"Find\" in your word processor. If you are looking for a word in a document, you can use \"Find\" to locate all instances of that word. `grepl()` is the same idea. It is looking for a phrase in a text field.\n\nWe can include multiple conditions in the `filter()` function. For example, to find all protests in Philadelphia, PA, before 2018 with more than 1,000 attendees, we can use the following code. Note that `&` is the logical AND operator. It returns `TRUE` if both conditions are `TRUE` and `FALSE` otherwise. The `|` operator is the logical OR operator. It returns `TRUE` if either condition is `TRUE` and `FALSE` otherwise.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n  filter(grepl(\"Philadelphia, PA\", Location) &\n           (Date <= \"2017-12-31\") &\n           (Attendees >= 1000))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Date                                             Location Attendees\n1  2017-01-21                                     Philadelphia, PA     50000\n2  2017-01-26                                     Philadelphia, PA      2360\n3  2017-01-29 Philadelphia International Airport, Philadelphia, PA      1910\n4  2017-02-04             Philadelphia City Hall, Philadelphia, PA      2000\n5  2017-03-02                  Independence Mall, Philadelphia, PA      1000\n6  2017-04-15                                     Philadelphia, PA      2000\n7  2017-04-22                                     Philadelphia, PA     10000\n8  2017-04-29                                     Philadelphia, PA      2000\n9  2017-05-01                                     Philadelphia, PA      2000\n10 2017-05-01                                     Philadelphia, PA      1000\n11 2017-08-16                                     Philadelphia, PA      2000\n                                                                         Tags\n1                             Civil Rights; For women's rights; Women's March\n2                                           Executive; Against 45th president\n3                                             Immigration; Against travel ban\n4                                             Immigration; Against travel ban\n5                                       Civil Rights; For religious tolerance\n6                              Executive; Against 45th president; Tax returns\n7                                       Other; For science; March for Science\n8                 Environment; Against climate change; People's Climate March\n9      Immigration; For compassionate immigration; For worker rights; May Day\n10                    Collective Bargaining; For better compensation; May Day\n11 Civil Rights; For racial justice; Against white supremacy; Charlottesville\n```\n\n\n:::\n:::\n\n\n\n\n## Exercise\n3. How many protests occurred in your home state? If not from the US just pick a state like New York \"NY\" or California \"CA\" or Pennsylvania \"PA\"\n\n4. Where did the protest in the last row of the full dataset occur?\n\n# Summarizing data\n\nWhat is the average size of a protest? The `summarize()` function is used to calculate summary statistics. For example, to calculate the average number of attendees at a protest, we can use the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   summarize(mean(Attendees))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mean(Attendees)\n1              NA\n```\n\n\n:::\n:::\n\n\n\nHmmm... it looks like there are some missing values in the `Attendees` column. Rather than just dropping them and computing the average of the rest, R forces us to be intentional about handling `NA`s. If indeed we want to drop the `NA`s, then we can use the `na.rm=TRUE` argument to remove the missing values before calculating the average.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   summarize(mean(Attendees, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mean(Attendees, na.rm = TRUE)\n1                      643.8831\n```\n\n\n:::\n:::\n\n\n\nPerhaps we are interested any several data summaries at the same time. No problem. Just include them all in `summarize()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   summarize(average = mean(Attendees, na.rm=TRUE),\n             median = median(Attendees, na.rm=TRUE),\n             minimum = min(Attendees, na.rm=TRUE),\n             maximum = max(Attendees, na.rm=TRUE),\n             NAcount = sum(is.na(Attendees)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   average median minimum maximum NAcount\n1 643.8831    100       0  725000   15061\n```\n\n\n:::\n:::\n\n\n\nThat was a lot of typing to get a complete set of summary statistics. The `summary()` function is always available for that.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(dataProtest$Attendees)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      NA's \n     0.00     26.75    100.00    643.88    200.00 725000.00     15061 \n```\n\n\n:::\n:::\n\n\n\nYou can also use it to get a quick summary of the entire dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(dataProtest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Date             Location           Attendees             Tags          \n Length:38097       Length:38097       Min.   :     0.00   Length:38097      \n Class :character   Class :character   1st Qu.:    26.75   Class :character  \n Mode  :character   Mode  :character   Median :   100.00   Mode  :character  \n                                       Mean   :   643.88                     \n                                       3rd Qu.:   200.00                     \n                                       Max.   :725000.00                     \n                                       NA's   :15061                         \n```\n\n\n:::\n:::\n\n\n\n\n# Mutate to edit and create new columns\n\nThe data does not contain a column for the state in which the protest occurred. We can create this column by extracting the state from the `Location` column. The last two characters of the `Location` column contain the state abbreviation. We can use the `str_sub()` function from the `stringr` package to extract the last two characters of the `Location` column. The `str_sub()` function is used to extract a substring from a string. For example, to extract the last two characters of the string \"Philadelphia, PA\", we can use the following code. Let's load the `stringr` and test out `str_sub()` on an example.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nstr_sub(\"Philadelphia, PA\", -2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PA\"\n```\n\n\n:::\n:::\n\n\n\nThe first argument is the string from which to extract the substring. The second argument is the starting position of the substring. A nice feature of `str_sub()` is that you can use negative numbers which it interprets as characters from the end. So the -2 tells `str_sub()` to start at the second to last character. The third argument is the ending position of the substring. Here the -1 means the very last character of the string. If we do not include a third argument, then `str_sub()` will extract the substring starting at the second argument and continuing to the end of the string. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_sub(\"Philadelphia, PA\", -2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PA\"\n```\n\n\n:::\n:::\n\n\n\nThere are other R functions that can extract substrings including `substring()`, `substr()`, and `gsub()`. I am introducing you to `str_sub()` since because it is the only one that lets you put negative numbers in the second and third arguments to easily grab substrings from the end. This is a very useful feature.\n\nWith `str_sub()` now in our toolbox, we can make a new column called `state` that contains the state in which the protest occurred. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest <- dataProtest |>\n   mutate(state=str_sub(Location, -2))\nhead(dataProtest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                          Location Attendees\n1 2017-01-15 Bowie State University, Bowie, MD      1500\n2 2017-01-16                  Johnson City, TN       300\n3 2017-01-16                  Indianapolis, IN        20\n4 2017-01-16                    Cincinnati, OH        NA\n5 2017-01-18                      Hartford, CT       300\n6 2017-01-19                    Washington, DC        NA\n                                                       Tags state\n1                       Healthcare; For Affordable Care Act    MD\n2 Civil Rights; For racial justice; Martin Luther King, Jr.    TN\n3                  Environment; For wilderness preservation    IN\n4 Civil Rights; For racial justice; Martin Luther King, Jr.    OH\n5                        Healthcare; For Planned Parenthood    CT\n6                         Executive; Against 45th president    DC\n```\n\n\n:::\n:::\n\n\n\nPeeking at the first few rows of `dataProtest` we can see that there is a new column with the state abbreviation. Please, always check that your code does what you intended to do. Run, check, run, check, one line at a time.\n\nSo you can see that `mutate()` is useful for making new data features computed based on other features. We also will use it to edit or clean up data. Let's check what these state abbreviations look like. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   count(state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   state    n\n1     AK  252\n2     AL  281\n3     AR  174\n4     AZ  563\n5     CA 4439\n6     CO  813\n7     CT  708\n8     DC  536\n9     DE  115\n10    FL 1822\n11    Fl    1\n12    GA  623\n13    GU   22\n14    HI  182\n15    Hi    1\n16    IA  470\n17    ID  344\n18    IL 1273\n19    IN  700\n20    KS  293\n21    KY  821\n22    LA  330\n23    MA 1265\n24    MD  453\n25    ME  437\n26    MI 1410\n27    MN  747\n28    MO  800\n29    MS  187\n30    MT  294\n31    Mi    1\n32    NC 1150\n33    ND   98\n34    NE  257\n35    NH  266\n36    NJ  893\n37    NM  402\n38    NV  300\n39    NY 2688\n40    OH 1107\n41    OK  324\n42    OR 1368\n43    PA 1656\n44    PR   19\n45    RI  194\n46    SC  439\n47    SD  101\n48    TN  576\n49    TX 1649\n50    UT  421\n51    VA  906\n52    VT  337\n53    WA 1375\n54    WI  812\n55    WV  266\n56    WY  131\n57    ce    1\n58    co    1\n59    iD    1\n60    te    1\n61    wA    1\n```\n\n\n:::\n:::\n\n\n\nHere I have used the `count()` function to count the number of protests in each state. It groups the data by the `state` column and then counts the number of rows in each group. The result is a new data frame with one column containing the state abbreviation (`state`) and another column containing the number of protests in that state (`count()` will always call this one `n`).\n\nDo you see some problems with our state abbreviations? I see an \"Fl\", an \"Hi\", and an \"Mi\" and a few others that do not seem to be correctly capitalized. I also see some abbreviations that are \"CE\" and \"TE\", not states that I know of. Let's take a closer look at these strange ones. Note that I am introducing the `%in%` operator. This is a logical operator that asks each value of `state` whether its value is in the collection to the right of `%in%`. It is a more compact way to write `state==\"Fl\" | state==\"Hi\" | state==\"Mi\" | state==\"ce\" | state==\"co\" | state==\"iD\" | state==\"te\" | state==\"wA\"`. Well, there. I have gone ahead and typed that all out. I hope to never have to type a logical expression with so many ORs again.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(state %in% c(\"Fl\",\"Hi\",\"Mi\",\"ce\",\"co\",\"iD\",\"te\",\"wA\")) |>\n   select(state, Location)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state                                     Location\n1    co                        Ciudad Juarez, Mexico\n2    ce                                        Space\n3    Fl                              Panama City, Fl\n4    Mi Wyoming Godfrey-Lee High School, Wyoming, Mi\n5    Hi                                 Honolulu, Hi\n6    wA                                Montesano, wA\n7    iD                     City Hall, Pocatello, iD\n8    te       La Porte County Courthouse in La Porte\n```\n\n\n:::\n:::\n\n\n\nPerhaps even more straightforward, R has a built in list of state abbreviations, `state.abb`. We can just filter those values of `state` that are not in this list (I will add Washington DC, Puerto Rico, and Guam too).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(!(state %in% c(state.abb, \"DC\", \"PR\", \"GU\"))) |>\n   select(state, Location)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state                                     Location\n1    co                        Ciudad Juarez, Mexico\n2    ce                                        Space\n3    Fl                              Panama City, Fl\n4    Mi Wyoming Godfrey-Lee High School, Wyoming, Mi\n5    Hi                                 Honolulu, Hi\n6    wA                                Montesano, wA\n7    iD                     City Hall, Pocatello, iD\n8    te       La Porte County Courthouse in La Porte\n```\n\n\n:::\n:::\n\n\n\n\nLots of different kinds of errors here. Five of them are just lower case. One is in Mexico (we need to drop this one). One is in Space (space is cool so let's keep that one for fun), and one is in La Porte, which I had to look up La Porte to find that it is in Indiana (IN). Let's clean this up using `mutate()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest <- dataProtest |>\n   filter(state != \"co\") |>  # drop Mexico\n   mutate(state = \n             case_match(state,\n                        \"ce\" ~ \"Space\",\n                        \"te\" ~ \"IN\",\n                        .default = toupper(state)))\ndataProtest |> \n   count(state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   state    n\n1     AK  252\n2     AL  281\n3     AR  174\n4     AZ  563\n5     CA 4439\n6     CO  813\n7     CT  708\n8     DC  536\n9     DE  115\n10    FL 1823\n11    GA  623\n12    GU   22\n13    HI  183\n14    IA  470\n15    ID  345\n16    IL 1273\n17    IN  701\n18    KS  293\n19    KY  821\n20    LA  330\n21    MA 1265\n22    MD  453\n23    ME  437\n24    MI 1411\n25    MN  747\n26    MO  800\n27    MS  187\n28    MT  294\n29    NC 1150\n30    ND   98\n31    NE  257\n32    NH  266\n33    NJ  893\n34    NM  402\n35    NV  300\n36    NY 2688\n37    OH 1107\n38    OK  324\n39    OR 1368\n40    PA 1656\n41    PR   19\n42    RI  194\n43    SC  439\n44    SD  101\n45 Space    1\n46    TN  576\n47    TX 1649\n48    UT  421\n49    VA  906\n50    VT  337\n51    WA 1376\n52    WI  812\n53    WV  266\n54    WY  131\n```\n\n\n:::\n:::\n\n\n\nSeveral things are happening here. First, we are using `case_match()` to change the state abbreviations. Note its structure. The first argument is the variable that we are matching (`state`). Then we list all the changes that we want to make. We are changing \"ce\" to \"Space\" and \"te\" to \"IN\". The `.default` argument is used to keep all other state abbreviations the same. The `toupper()` function is used to make sure that all state abbreviations are in upper case. Finally we rerun the `count()` function to see if our changes worked. All looks good now.\n\nThe last feature that we have yet to explore is the `Tags` column. This column contains a list of reasons for the protest. The format of the tags is to have the reasons separated by a semicolon and a space. For example, a protest might have the tags \"Civil Rights; Against pandemic intervention; Police brutality\". We can use the `strsplit()` function to split the tags into separate reasons. For example, to split the tags in the first three rows of the dataset, we can use the following code. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# what does the tag look like originally?\ndataProtest$Tags[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Healthcare; For Affordable Care Act\"                      \n[2] \"Civil Rights; For racial justice; Martin Luther King, Jr.\"\n[3] \"Environment; For wilderness preservation\"                 \n```\n\n\n:::\n\n```{.r .cell-code}\n# now split it\nstrsplit(dataProtest$Tags[1:3], \"; \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"Healthcare\"              \"For Affordable Care Act\"\n\n[[2]]\n[1] \"Civil Rights\"            \"For racial justice\"     \n[3] \"Martin Luther King, Jr.\"\n\n[[3]]\n[1] \"Environment\"                 \"For wilderness preservation\"\n```\n\n\n:::\n:::\n\n\n\n`strsplit()` returns a `list` structure. This is a structure in R that has no columns and rows. Since each protest has a different number of tags, once we split them up, they do not fit neatly into fixed columns. We can use `unlist()` to remove the list structure and create a long vector of all of the tags. And I will use `table()`, `sort()`, and `tail()` to find the most common reasons for a protest.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreasons <- strsplit(dataProtest$Tags, \"; \")\nreasons <- unlist(reasons)\ntable(reasons) |> sort() |> tail()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nreasons\n               Immigration                      Other \n                      3543                       4556 \n                    Police For greater accountability \n                      8254                       8376 \n        For racial justice               Civil Rights \n                     10575                      14807 \n```\n\n\n:::\n:::\n\n\n\nClearly, Civil Rights has topped the list. We can use this information to create a new column that is 1 if the protest has the tag \"Civil Rights\" and 0 otherwise.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest <- dataProtest |>\n   mutate(civilrights = as.numeric(grepl(\"Civil Rights\", Tags)))\n```\n:::\n\n\n\nJust like before when we used `grepl()` to find any text matches for \"Philadelphia, PA\", this time we are using it to search `Tags` for any matches to \"Civil Rights\". Again, it returns `TRUE` if the pattern is found and `FALSE` otherwise. `as.numeric()` converts `TRUE` to 1 and `FALSE` to 0.\n\nThis script is getting long. I have done every step piece by piece with a lot of explanation in between. In practice, you would not do this. You would combine everything into one pipeline that takes in the original dataset and does all the filtering and mutating and selecting to get you the dataset that you want. Here is everything we have done so far compactly written.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"protests.RData\")\ndataProtest <- dataProtest |>\n   select(Date, Location, Attendees, Tags) |>\n   filter(Location != \"Ciudad Juarez, Mexico\") |>\n   mutate(state=str_sub(Location, -2),\n          state=case_match(state,\n                           \"ce\" ~ \"Space\",\n                           \"te\" ~ \"IN\",\n                           .default = toupper(state)),\n          civilrights=as.numeric(grepl(\"Civil Rights\", Tags)))\nhead(dataProtest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date                          Location Attendees\n1 2017-01-15 Bowie State University, Bowie, MD      1500\n2 2017-01-16                  Johnson City, TN       300\n3 2017-01-16                  Indianapolis, IN        20\n4 2017-01-16                    Cincinnati, OH        NA\n5 2017-01-18                      Hartford, CT       300\n6 2017-01-19                    Washington, DC        NA\n                                                       Tags state civilrights\n1                       Healthcare; For Affordable Care Act    MD           0\n2 Civil Rights; For racial justice; Martin Luther King, Jr.    TN           1\n3                  Environment; For wilderness preservation    IN           0\n4 Civil Rights; For racial justice; Martin Luther King, Jr.    OH           1\n5                        Healthcare; For Planned Parenthood    CT           0\n6                         Executive; Against 45th president    DC           0\n```\n\n\n:::\n:::\n\n\n\n\n## Exercises\n5. Which state had the most protests? \n\n6. Which state had the least protests?\n\n7. Which state had the most civil rights protests?\n\n8. Create a new column that is 1 if the protest has the tag 'Against pandemic intervention'\n\n9. Which state had the most protests against pandemic interventions?\n\n# Creating your own functions\n\nPart of what makes R so powerful and useful is that you can create your own functions. In this way, the R user community can expand R's capabilities to do new tasks. For example, R does not have a built-in function to find the most common value in a collection. We can create our own function to do this. Have a look at this sequence of steps.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- table(unlist(reasons))\na |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      Against 45th president       Against 46th president \n                        1543                            3 \n     Against abortion rights          Against accusations \n                         444                            2 \nAgainst administrative leave              Against advisor \n                           6                           12 \n```\n\n\n:::\n\n```{.r .cell-code}\nmax(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14807\n```\n\n\n:::\n\n```{.r .cell-code}\na[a==max(a)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCivil Rights \n       14807 \n```\n\n\n:::\n\n```{.r .cell-code}\nnames(a[a==max(a)])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Civil Rights\"\n```\n\n\n:::\n:::\n\n\n\nYou have seen `table()` and `unlist()` in action earlier. Then I used `max()` to find the largest number of protests for a single reason. Then I used the expression `a[a==max(a)]`. Inside the square brackets, I ask each value of `a` (the table counts) if they equal the largest value. This returns a logical vector of `TRUE` and `FALSE` values. The square brackets will then pick out from a only those values where the logical expression `a==max(a)` evaluates to `TRUE`. I use this approach rather than `max()` or `head(1)` because it is possible that there are multiple tags that equal the maximum count. Finally, I used `names()` to get the name of the reason. I can pack all of this into a new function called `mostCommon()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmostCommon <- function(x)\n{\n   a <- table(x)  \n   return( names(a[a==max(a)]) )\n}\n```\n:::\n\n\n\nThis function is now a part of our R session and we can use it as we have other functions like `max()` or `mean()`. For example, to find the state with the most protests:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmostCommon(dataProtest$state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"CA\"\n```\n\n\n:::\n:::\n\n\n\nOr the most common date for a protest.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmostCommon(dataProtest$Date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2018-03-14\"\n```\n\n\n:::\n:::\n\n\n\n\nWhat the most common date for civil rights protests in Texas?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n  filter(state==\"TX\" & civilrights==1) |>\n  summarize(mostCommon(Date))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mostCommon(Date)\n1       2020-06-06\n```\n\n\n:::\n:::\n\n\n\n\nWhat happened in Texas on 2020-06-06?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(Date==\"2020-06-06\" & state==\"TX\") |>\n   count(Tags)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                                  Tags  n\n1 Civil Rights; For racial justice; For greater accountability; Police 28\n2                   Civil Rights; For white supremacy; Counter protest  1\n3                                    Guns; Against greater gun control  1\n```\n\n\n:::\n:::\n\n\n\nThis is the height of the George Floyd protests. There were 28 protests recorded in Texas on that day tagged with \"Civil Rights; For racial justice; For greater accountability; Police\".\n\nLet's make a special collection of states that includes PA and all of its bordering states. We can use this collection to filter the dataset to only include protests in these states.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPAplusBorderingstates <- c(\"PA\",\"DE\",\"MD\",\"NJ\",\"NY\",\"OH\",\"WV\")\ndataProtest |>\n  filter(state %in% PAplusBorderingstates) |>\n  summarize(mostCommon(Date))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mostCommon(Date)\n1       2018-03-14\n```\n\n\n:::\n:::\n\n\n\nAs I did earlier, I used the `%in%` operator to ask each state in `dataProtest` whether it is a member of the `PAplusBorderingstates` collection. This returns a logical vector of `TRUE` and `FALSE` values. The `filter()` function then keeps only those rows where the logical expression evaluates to `TRUE`.\n\nHere we find that 2018-03-14 is the most common date for protests in Pennsylvania and its bordering states. This particular pi-Day was the day of the National School Walkout to protest gun violence.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(Date==\"2018-03-14\" & state %in% PAplusBorderingstates) |>\n   count(Tags)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                                  Tags   n\n1                                  Civil Rights; For freedom of speech   1\n2 Civil Rights; For racial justice; For greater accountability; Police   1\n3                                    Environment; Against fossil fuels   1\n4                   Guns; Against greater gun control; Counter protest   2\n5                                        Guns; For greater gun control   2\n6                  Guns; For greater gun control; National Walkout Day 262\n```\n\n\n:::\n:::\n\n\n\n\n# Summarizing with groups of protests\n\nWe can use the `group_by()` function to group the data by a certain feature. All subsequent operations will be performed separately within each group. For example, let's total the number of protest attendees by state.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# will double count protesters at multiple protests\ndataProtest |>\n  group_by(state) |>\n  summarize(sum(Attendees, na.rm=TRUE)) |>\n  print(n=Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 54 × 2\n   state `sum(Attendees, na.rm = TRUE)`\n   <chr>                          <int>\n 1 AK                             35987\n 2 AL                             34919\n 3 AR                             21859\n 4 AZ                            224194\n 5 CA                           3190858\n 6 CO                            428654\n 7 CT                            106285\n 8 DC                           1460536\n 9 DE                             11280\n10 FL                            413328\n11 GA                            177400\n12 GU                               945\n13 HI                             65548\n14 IA                            101200\n15 ID                             45776\n16 IL                            907239\n17 IN                             95985\n18 KS                             45736\n19 KY                            111992\n20 LA                             45151\n21 MA                            507235\n22 MD                             70662\n23 ME                             80716\n24 MI                            214651\n25 MN                            253084\n26 MO                            130153\n27 MS                             21677\n28 MT                             66652\n29 NC                            230558\n30 ND                             13599\n31 NE                             72351\n32 NH                             45947\n33 NJ                            166706\n34 NM                             88496\n35 NV                             95383\n36 NY                           1730569\n37 OH                            182713\n38 OK                             74817\n39 OR                            393032\n40 PA                            391832\n41 PR                             15420\n42 RI                             35288\n43 SC                             71799\n44 SD                             16353\n45 Space                              0\n46 TN                            166575\n47 TX                           1136339\n48 UT                             93693\n49 VA                            127368\n50 VT                             68376\n51 WA                            490261\n52 WI                            211482\n53 WV                             31804\n54 WY                             11929\n```\n\n\n:::\n:::\n\n\n\n`summarize()` calculated the total number of attendees within each state. By default, R will print only the first 10 rows of the dataset. I used `print(n=Inf)` to force R to print all the rows. \n\nWe can also calculate the average number of attendees at a protest in each state.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(pillar.sigfig=5) # less rounding\ndataProtest |>\n  group_by(state) |>\n  summarize(Total=sum(Attendees, na.rm=TRUE),\n            Average=mean(Attendees, na.rm=TRUE)) |>\n  print(n=Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 54 × 3\n   state   Total Average\n   <chr>   <int>   <dbl>\n 1 AK      35987  218.10\n 2 AL      34919  231.25\n 3 AR      21859  208.18\n 4 AZ     224194  640.55\n 5 CA    3190858 1191.1 \n 6 CO     428654  865.97\n 7 CT     106285  238.84\n 8 DC    1460536 4651.4 \n 9 DE      11280  163.48\n10 FL     413328  382.36\n11 GA     177400  476.88\n12 GU        945   63   \n13 HI      65548  550.82\n14 IA     101200  328.57\n15 ID      45776  293.44\n16 IL     907239 1154.2 \n17 IN      95985  195.49\n18 KS      45736  245.89\n19 KY     111992  288.64\n20 LA      45151  226.89\n21 MA     507235  604.57\n22 MD      70662  245.35\n23 ME      80716  271.77\n24 MI     214651  257.99\n25 MN     253084  562.41\n26 MO     130153  309.15\n27 MS      21677  216.77\n28 MT      66652  320.44\n29 NC     230558  347.75\n30 ND      13599  209.22\n31 NE      72351  411.09\n32 NH      45947  268.70\n33 NJ     166706  289.92\n34 NM      88496  330.21\n35 NV      95383  456.38\n36 NY    1730569 1070.2 \n37 OH     182713  295.65\n38 OK      74817  413.35\n39 OR     393032  517.15\n40 PA     391832  352.05\n41 PR      15420 1401.8 \n42 RI      35288  273.55\n43 SC      71799  276.15\n44 SD      16353  247.77\n45 Space       0  NaN   \n46 TN     166575  470.55\n47 TX    1136339 1228.5 \n48 UT      93693  331.07\n49 VA     127368  225.43\n50 VT      68376  309.39\n51 WA     490261  604.51\n52 WI     211482  473.11\n53 WV      31804  200.03\n54 WY      11929  151   \n```\n\n\n:::\n:::\n\n\n\nI used `options(pillar.sigfig=5)` to show more digits of precision in the output. \n\nInterested in which \"state\" has the largest average protest size? Use `slice_max()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n  group_by(state) |>\n  summarize(Average=mean(Attendees, na.rm=TRUE)) |>\n  slice_max(n=1,Average)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  state Average\n  <chr>   <dbl>\n1 DC     4651.4\n```\n\n\n:::\n:::\n\n\n\n\nWe can also simply arrange the rows in descending order of average protest size.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n  group_by(state) |>\n  summarize(Average=mean(Attendees, na.rm=TRUE)) |>\n  arrange(desc(Average))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 54 × 2\n   state Average\n   <chr>   <dbl>\n 1 DC    4651.4 \n 2 PR    1401.8 \n 3 TX    1228.5 \n 4 CA    1191.1 \n 5 IL    1154.2 \n 6 NY    1070.2 \n 7 CO     865.97\n 8 AZ     640.55\n 9 MA     604.57\n10 WA     604.51\n# ℹ 44 more rows\n```\n\n\n:::\n:::\n\n\n\n  \n\n## Exercises\n\n10. Are civil rights protests larger on average than non-civil rights protests? (Hint: use group_by/summarize)\n\n# Graphics and plots\n\nWe will finish our introduction to R by exploring `Tags` a little more through some barplots and a word cloud.\n\nI will start by a special version of `mostCommon()` that will take a collection of tags and return the most common tag. This will allow us to find the most common protest type in the dataset. This function splits up the tags as we did before, and then applies `mostCommon()` to the resulting collection of tags.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmostCommonType <- function(x)\n{\n  reasons <- strsplit(x, \"; \")\n  reasons <- unlist(reasons)\n  return( mostCommon(reasons) )\n}\n\n# test it out\ndataProtest$Tags[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Healthcare; For Affordable Care Act\"                      \n [2] \"Civil Rights; For racial justice; Martin Luther King, Jr.\"\n [3] \"Environment; For wilderness preservation\"                 \n [4] \"Civil Rights; For racial justice; Martin Luther King, Jr.\"\n [5] \"Healthcare; For Planned Parenthood\"                       \n [6] \"Executive; Against 45th president\"                        \n [7] \"Executive; For 45th president; Counter protest\"           \n [8] \"Civil Rights; For racial justice; Against invited speaker\"\n [9] \"Executive; Against 45th president\"                        \n[10] \"Civil Rights; For women's rights; Women's March\"          \n```\n\n\n:::\n\n```{.r .cell-code}\nmostCommonType(dataProtest$Tags[1:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Civil Rights\"\n```\n\n\n:::\n:::\n\n\n\n\nNow we can use `mostCommonType()` to find the most common protest type in the dataset. Note that `mostCommonType()` can return more than one value. `summarize()` will complain if it gets more than one value. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n  group_by(state) |>\n  summarize(mostCommonType(Tags)) |> \n  print(n=Inf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 58 × 2\n# Groups:   state [54]\n   state `mostCommonType(Tags)` \n   <chr> <chr>                  \n 1 AK    Civil Rights           \n 2 AL    Civil Rights           \n 3 AR    Civil Rights           \n 4 AZ    Civil Rights           \n 5 CA    Civil Rights           \n 6 CO    Civil Rights           \n 7 CT    Civil Rights           \n 8 DC    Civil Rights           \n 9 DE    Civil Rights           \n10 FL    Civil Rights           \n11 GA    Civil Rights           \n12 GU    Civil Rights           \n13 GU    Other                  \n14 HI    Other                  \n15 IA    Civil Rights           \n16 ID    Civil Rights           \n17 IL    Civil Rights           \n18 IN    Civil Rights           \n19 KS    Civil Rights           \n20 KY    Civil Rights           \n21 LA    Civil Rights           \n22 MA    Civil Rights           \n23 MD    Civil Rights           \n24 ME    Civil Rights           \n25 MI    Civil Rights           \n26 MN    Civil Rights           \n27 MO    Civil Rights           \n28 MS    Civil Rights           \n29 MT    Civil Rights           \n30 NC    Civil Rights           \n31 ND    Civil Rights           \n32 NE    Civil Rights           \n33 NH    Civil Rights           \n34 NJ    Civil Rights           \n35 NM    Civil Rights           \n36 NV    Civil Rights           \n37 NY    Civil Rights           \n38 OH    Civil Rights           \n39 OK    Civil Rights           \n40 OR    Civil Rights           \n41 PA    Civil Rights           \n42 PR    Against corruption     \n43 PR    Against state executive\n44 PR    Executive              \n45 RI    Civil Rights           \n46 SC    Civil Rights           \n47 SD    Civil Rights           \n48 Space Against 45th president \n49 Space Executive              \n50 TN    Civil Rights           \n51 TX    Civil Rights           \n52 UT    Civil Rights           \n53 VA    Civil Rights           \n54 VT    Civil Rights           \n55 WA    Civil Rights           \n56 WI    Civil Rights           \n57 WV    Civil Rights           \n58 WY    Civil Rights           \n```\n\n\n:::\n:::\n\n\n\nSo let's redo that with `reframe()` instead. `reframe()` is like `summarize()` but allows for multiple values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n  group_by(state) |>\n  reframe(mostCommonType(Tags)) |> \n  print(n=Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 58 × 2\n   state `mostCommonType(Tags)` \n   <chr> <chr>                  \n 1 AK    Civil Rights           \n 2 AL    Civil Rights           \n 3 AR    Civil Rights           \n 4 AZ    Civil Rights           \n 5 CA    Civil Rights           \n 6 CO    Civil Rights           \n 7 CT    Civil Rights           \n 8 DC    Civil Rights           \n 9 DE    Civil Rights           \n10 FL    Civil Rights           \n11 GA    Civil Rights           \n12 GU    Civil Rights           \n13 GU    Other                  \n14 HI    Other                  \n15 IA    Civil Rights           \n16 ID    Civil Rights           \n17 IL    Civil Rights           \n18 IN    Civil Rights           \n19 KS    Civil Rights           \n20 KY    Civil Rights           \n21 LA    Civil Rights           \n22 MA    Civil Rights           \n23 MD    Civil Rights           \n24 ME    Civil Rights           \n25 MI    Civil Rights           \n26 MN    Civil Rights           \n27 MO    Civil Rights           \n28 MS    Civil Rights           \n29 MT    Civil Rights           \n30 NC    Civil Rights           \n31 ND    Civil Rights           \n32 NE    Civil Rights           \n33 NH    Civil Rights           \n34 NJ    Civil Rights           \n35 NM    Civil Rights           \n36 NV    Civil Rights           \n37 NY    Civil Rights           \n38 OH    Civil Rights           \n39 OK    Civil Rights           \n40 OR    Civil Rights           \n41 PA    Civil Rights           \n42 PR    Against corruption     \n43 PR    Against state executive\n44 PR    Executive              \n45 RI    Civil Rights           \n46 SC    Civil Rights           \n47 SD    Civil Rights           \n48 Space Against 45th president \n49 Space Executive              \n50 TN    Civil Rights           \n51 TX    Civil Rights           \n52 UT    Civil Rights           \n53 VA    Civil Rights           \n54 VT    Civil Rights           \n55 WA    Civil Rights           \n56 WI    Civil Rights           \n57 WV    Civil Rights           \n58 WY    Civil Rights           \n```\n\n\n:::\n:::\n\n\n\nSo why does Puerto Rico show up three times in these results? \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n  filter(state==\"PR\") |>\n  pull(Tags) |>\n  strsplit(\"; \") |>\n  unlist() |>\n  table() |>\n  sort()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   Against austerity measures           Day Without a Woman \n                            1                             1 \n                     Families      Families Belong Together \n                            1                             1 \n   For greater accountability            For racial justice \n                            1                             1 \n           For women's rights             For worker rights \n                            1                             1 \n                      May Day                        Police \n                            1                             1 \n                 Civil Rights For compassionate immigration \n                            2                             2 \n                  Immigration           For Puerto Rico aid \n                            2                             3 \n                        Other            Against corruption \n                            4                            11 \n      Against state executive                     Executive \n                           11                            11 \n```\n\n\n:::\n:::\n\n\n\nThere are three tags all with 11 protests each, a three-way tie for the largest number of protests. So `mostCommonType()` returns all three tags.\n\nR has a lot of built-in functions for creating plots and graphics. We will use the `barplot()` function to create a bar plot of the average number of attendees at protests in each state.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- dataProtest |>\n  group_by(state) |>\n  summarize(Attendees=mean(Attendees, na.rm=TRUE))\nbarplot(a$Attendees, names.arg = a$state)\n```\n\n::: {.cell-output-display}\n![](01_Intro_to_R_protests_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\n\n\nThe state name labels are two big so we can shrink the \"character expansion\" (`cex`) by half.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(a$Attendees, names.arg = a$state, cex.names=0.5)\n```\n\n::: {.cell-output-display}\n![](01_Intro_to_R_protests_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\n\nWe can also make the plot horizontal.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(a$Attendees, names.arg = a$state, \n        cex.names=0.3,\n        horiz=TRUE, \n        col=\"seagreen\",\n        xlim=c(0,5000))\n```\n\n::: {.cell-output-display}\n![](01_Intro_to_R_protests_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can also create a bar plot of the number of protests for the top 5 reasons.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreasons <- dataProtest$Tags |> \n  strsplit(\";\") |> \n  unlist() |> \n  table() |>\n  sort(decreasing = TRUE) |>\n  head(5)\nbarplot(reasons,\n        ylab=\"Number of Protests\",\n        xlab=\"Protest Reason\")\n```\n\n::: {.cell-output-display}\n![](01_Intro_to_R_protests_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n\n\nFor figures and plots, always use a vector graphics format. That means export your graphics using SVG or EMF. These formats are scalable and will look good at any size. You can insert these graphics into Word, PowerPoint, or Google Docs. PNG graphics tend to look blurry in reports and presentations. Show some pride in your data work by making sure that your final product looks great. Stick with SVG or EMF or another vector graphics format.\n\nWe will end with a beautiful word cloud of the protest tags.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(wordcloud2)\ndataProtest$Tags |>\n  strsplit(split=\"; \") |> \n  unlist() |>\n  table() |>\n  wordcloud2()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"wordcloud2 html-widget html-fill-item\" id=\"htmlwidget-62e7603db69af5321b2d\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-62e7603db69af5321b2d\">{\"x\":{\"word\":[\"Against 45th president\",\"Against 46th president\",\"Against abortion rights\",\"Against accusations\",\"Against administrative leave\",\"Against advisor\",\"Against affirmative action\",\"Against Affordable Care Act\",\"Against affordable housing\",\"Against age limit\",\"Against animal welfare\",\"Against assisted suicide\",\"Against austerity measures\",\"Against backpack ban\",\"Against better compensation\",\"Against bikes\",\"Against biofuels\",\"Against bond\",\"Against border wall\",\"Against budget\",\"Against bullying\",\"Against business\",\"Against cabinet member\",\"Against cabinet nomination\",\"Against candidate\",\"Against capitalism\",\"Against charter schools/vouchers\",\"Against child abuse\",\"Against child marriage\",\"Against circumcision\",\"Against city councilor\",\"Against climate change\",\"Against closure/relocation\",\"Against colonization\",\"Against Confederate symbol\",\"Against congressional representative\",\"Against continued investigation\",\"Against contracting\",\"Against corruption\",\"Against crime\",\"Against criminal justice reform\",\"Against cult\",\"Against cultural appropriation\",\"Against curriculum changes\",\"Against DACA\",\"Against dams\",\"Against data collection\",\"Against death penalty\",\"Against debt\",\"Against decision\",\"Against deregulation\",\"Against development\",\"Against discipline/conviction\",\"Against disrespecting flag\",\"Against donation\",\"Against donor\",\"Against dress code\",\"Against drones\",\"Against drugs\",\"Against elder abuse\",\"Against embassy move\",\"Against eminent domain\",\"Against eviction\",\"Against exclusion\",\"Against existing curriculum\",\"Against expanding coverage\",\"Against external protesters\",\"Against extracurricular changes\",\"Against fees\",\"Against firing/reassignment\",\"Against forced intersex surgery\",\"Against foreign government\",\"Against fossil fuels\",\"Against freedom of press\",\"Against freedom of speech\",\"Against gambling\",\"Against gentrification\",\"Against government overreach\",\"Against greater accountability\",\"Against greater funding\",\"Against greater gun control\",\"Against greater inclusion\",\"Against Guantanamo Bay\",\"Against hazardous conditions\",\"Against higher minimum wage\",\"Against hiring\",\"Against homeless residents\",\"Against hospitalists\",\"Against human trafficking\",\"Against ICE\",\"Against imprisonment\",\"Against increased prices\",\"Against invited speaker\",\"Against judge\",\"Against kneeling\",\"Against lame duck legislation\",\"Against landscaping\",\"Against layoffs\",\"Against lobbying\",\"Against logging\",\"Against marijuana\",\"Against mayor\",\"Against media\",\"Against merger\",\"Against mining\",\"Against mismanagement\",\"Against monitoring\",\"Against Naloxone\",\"Against nationalism/fascism\",\"Against needle exchange\",\"Against noise\",\"Against NRA\",\"Against nuclear weapons\",\"Against opioid epidemic\",\"Against outsourcing\",\"Against overcrowding\",\"Against pandemic intervention\",\"Against payday loans\",\"Against pesticide\",\"Against pharmaceutical pricing\",\"Against Planned Parenthood\",\"Against police presence\",\"Against political repression\",\"Against pornography\",\"Against poverty\",\"Against pricing carbon\",\"Against privatization\",\"Against progressive agenda\",\"Against public transportation\",\"Against punishment\",\"Against quotas\",\"Against rate changes\",\"Against redistricting\",\"Against referendum change\",\"Against regulation\",\"Against reimbursements\",\"Against religious exemption\",\"Against religious tolerance\",\"Against renewable energy\",\"Against rent control\",\"Against research findings\",\"Against resource allocation\",\"Against restricting access\",\"Against revising treatment standards\",\"Against ride share\",\"Against safe spaces\",\"Against sales\",\"Against sanctuary city/state\",\"Against schedule change\",\"Against separation of church and state\",\"Against sex offender\",\"Against sexual/domestic violence\",\"Against short-term rental\",\"Against shutdown\",\"Against single payer\",\"Against slavery\",\"Against smart meters\",\"Against state congressional representative\",\"Against state executive\",\"Against strip club\",\"Against Supreme Court nomination\",\"Against systemic underfunding\",\"Against takeover\",\"Against tax\",\"Against tax plan\",\"Against teachers\",\"Against technology\",\"Against test-based evaluation\",\"Against torture\",\"Against tourism\",\"Against trade agreement\",\"Against transgender rights\",\"Against travel ban\",\"Against tree removal\",\"Against underage drinking\",\"Against understaffing\",\"Against unionization\",\"Against US intervention\",\"Against vaccines\",\"Against Veterans Affairs\",\"Against violence\",\"Against voter fraud commission\",\"Against war\",\"Against white supremacy\",\"Against wilderness preservation\",\"Against women's rights\",\"Against worker rights\",\"Against zoning\",\"Air\",\"Algeria\",\"Amazon\",\"Anti-LGBTQ\",\"Anti-Muslim\",\"Anti-Semitic\",\"Antifa\",\"Armenia\",\"Armenian Genocide\",\"Automation\",\"Azerbaijan\",\"Bangladesh\",\"Benghazi\",\"Black Women's March\",\"Bolivia\",\"Brazil\",\"Burundi\",\"Business\",\"Cambodia\",\"Campaign\",\"Census\",\"Cesar Chavez\",\"Charlottesville\",\"China\",\"Church\",\"Civil Rights\",\"Climate Strike\",\"Clothing\",\"Collective Bargaining\",\"Congo\",\"Conspiracy theory\",\"Coronavirus\",\"Counter protest\",\"Cuba\",\"Day Without a Woman\",\"Day Without Immigrants\",\"Dijibouti\",\"Drugs/Alcohol\",\"Education\",\"Egypt\",\"Employment\",\"Environment\",\"EPA\",\"Ethiopia\",\"Executive\",\"Facebook\",\"Families\",\"Families Belong Together\",\"Farming\",\"For 45th president\",\"For 46th president\",\"For abortion rights\",\"For affirmative action\",\"For Affordable Care Act\",\"For affordable housing\",\"For animal welfare\",\"For assisted suicide\",\"For better compensation\",\"For better maternal care\",\"For bikes\",\"For biofuels\",\"For bond\",\"For border wall\",\"For breastfeeding\",\"For budget\",\"For business\",\"For candidate\",\"For carbon tax\",\"For changing meal plan\",\"For charter schools\",\"For child abuse\",\"For child care\",\"For CHIP\",\"For city councilor\",\"For clemency\",\"For climate change\",\"For closure/relocation\",\"For colonization\",\"For compassionate immigration\",\"For Confederate symbol\",\"For congressional representative\",\"For conservative agenda\",\"For constitutional convention\",\"For consumer protections\",\"For continued investigation\",\"For continuity of coverage\",\"For contracting\",\"For criminal justice\",\"For criminal justice reform\",\"For DACA\",\"For dams\",\"For death penalty\",\"For development\",\"For disability rights\",\"For discipline/conviction\",\"For equitable custody\",\"For expanding coverage\",\"For extracurricular changes\",\"For family welfare benefits\",\"For firing/reassignment\",\"For food security\",\"For foreign government\",\"For fossil fuels\",\"For free tuition\",\"For freedom of assembly\",\"For freedom of press\",\"For freedom of speech\",\"For gambling\",\"For greater access\",\"For greater accountability\",\"For greater awareness\",\"For greater funding\",\"For greater gun control\",\"For greater immigration constraints\",\"For greater inclusion\",\"For greater participation\",\"For greater regulation\",\"For greater safety\",\"For greater taxes\",\"For greater transparency\",\"For higher minimum wage\",\"For hiring\",\"For historic preservation\",\"For homeless residents\",\"For homeschooling\",\"For human rights\",\"For ICE\",\"For improving infrastructure\",\"For independence\",\"For invited speaker\",\"For Israel\",\"For legalization\",\"For library\",\"For local services\",\"For marijuana\",\"For mayor\",\"For Medicaid\",\"For Medicare\",\"For mining\",\"For monitoring\",\"For more permissive enrollment\",\"For Naloxone\",\"For nationalism\",\"For needle exchange\",\"For net neutrality\",\"For nudity\",\"For opioid access\",\"For opportunity\",\"For Palestine\",\"For pandemic intervention\",\"For pensions\",\"For pesticide\",\"For pet\",\"For Planned Parenthood\",\"For political prisoner release\",\"For preschool\",\"For privacy rights\",\"For progressive agenda\",\"For property rights\",\"For public transportation\",\"For Puerto Rico aid\",\"For punishment\",\"For racial justice\",\"For recognition\",\"For redistricting\",\"For refugees\",\"For religious tolerance\",\"For renewable energy\",\"For rent control\",\"For restricting access\",\"For revising treatment standards\",\"For ride share\",\"For safety net\",\"For sales\",\"For sanctuary city/state\",\"For schedule change\",\"For school security\",\"For science\",\"For senior services\",\"For separation of church and state\",\"For sexual/domestic violence\",\"For short-term rental\",\"For single payer\",\"For smoking\",\"For special-needs\",\"For state congressional representative\",\"For state executive\",\"For status quo\",\"For supporting police\",\"For Supreme Court nomination\",\"For tax\",\"For tax plan\",\"For Temporary Protected Status\",\"For term limits\",\"For test-based admissions\",\"For tourism\",\"For trade agreement\",\"For transgender rights\",\"For travel ban\",\"For treatment\",\"For unionization\",\"For universal health care\",\"For US intervention\",\"For vaccines\",\"For veteran services\",\"For vocational programs\",\"For vouchers\",\"For war\",\"For whistleblowing\",\"For white supremacy\",\"For wilderness preservation\",\"For women's rights\",\"For worker rights\",\"Google\",\"Guns\",\"Hazing\",\"Healthcare\",\"HIV/AIDS\",\"Honduras\",\"Hong Kong\",\"Housing\",\"Identification\",\"Immigration\",\"Impeachment\",\"India\",\"Insurance\",\"International\",\"International Women's Day\",\"Iran\",\"Iraq\",\"Israel\",\"Journalism\",\"Judicial\",\"Large corporation\",\"Lebanon\",\"Legislative\",\"Local governance\",\"March for Our Lives\",\"March for Science\",\"March for Truth\",\"Marijuana\",\"Martin Luther King, Jr.\",\"May Day\",\"Mental health\",\"Mexico\",\"Military\",\"Missing person\",\"Moral Monday\",\"Myanmar\",\"National anthem\",\"National Walkout Day\",\"Native Americans\",\"Natural disaster\",\"Nigeria\",\"North Korea\",\"Other\",\"Pakistan\",\"Pardon\",\"Paris Climate Accord\",\"Park\",\"People's Climate March\",\"Philippines\",\"Plastic\",\"Playground\",\"Poland\",\"Police\",\"Poor People's Campaign\",\"Post Office\",\"Pride\",\"Prisons\",\"Pro-LGBTQ\",\"Rally Against Domestic Violence\",\"Recess Rally\",\"Religious practice\",\"Russia\",\"Sex workers\",\"Smartphone\",\"Sports\",\"State budget\",\"State constitution\",\"Street vendor\",\"Sudan\",\"Supreme Court\",\"Syria\",\"Take Back the Night\",\"Tax returns\",\"Tea Party\",\"Tibet\",\"Togo\",\"Transportation\",\"Tuition\",\"Turkey\",\"Uber\",\"Utility\",\"Venezuela\",\"Vietnam\",\"Voting\",\"War monument\",\"Water\",\"Wear Orange\",\"Women's March\",\"Yemen\"],\"freq\":[1543,3,444,2,6,12,2,1,7,4,9,1,2,1,2,3,1,4,165,223,45,177,46,62,71,4,61,88,3,20,10,741,195,70,301,184,1,1,40,16,8,1,1,47,2,2,1,33,1,1,4,316,11,6,1,1,20,12,26,1,17,6,99,1,6,1,1,8,39,403,2,184,542,1,1,3,31,15,3,1,367,3,8,944,6,1,42,1,91,168,2,61,157,2,9,5,1,206,6,9,12,32,3,6,8,317,14,1,3,3,16,9,16,45,33,3,1243,9,11,18,69,63,2,1,7,8,63,13,7,86,2,2,17,1,71,3,1,3,3,1,1,6,3,1,7,1,9,15,16,9,6,620,8,80,1,2,1,10,109,1,341,313,11,38,130,2,2,7,1,11,2,9,324,21,1,95,4,22,68,1,372,2,285,548,5,11,1,9,15,1,49,108,40,6,32,21,5,2,3,1,1,3,1,1,1,139,2,102,3,23,396,26,5,14807,365,3,1716,1,65,2375,1513,5,73,85,1,69,2087,2,1,1678,5,6,3302,16,1078,577,26,1086,75,419,2,406,103,306,2,912,8,18,2,9,27,10,18,15,35,1,4,16,1,10,1,4,1,1,3,17,2220,183,31,14,3,1,55,2,1,130,164,432,2,2,42,28,3,4,57,2,2,124,14,11,12,3,93,2,37,1,39,8376,57,99,3000,72,209,137,14,100,9,71,118,1,49,180,1,4,7,14,4,3,14,1,11,85,78,5,36,3,1,1,2,1,2,1,26,5,19,3,80,88,26,1,1,97,1,6,9,147,2,54,28,2,10575,1,22,30,157,19,25,18,8,1,98,3,90,3,1,147,18,4,4,5,24,2,10,2,4,12,443,33,17,3,26,1,7,1,2,177,2,3,183,10,25,5,26,1,34,6,1,491,110,1127,413,12,3467,1,1906,1,1,14,83,1,3543,465,45,3,662,31,182,3,119,5,384,1,3,481,51,510,140,59,4,307,152,64,1,66,9,1,4,197,1312,113,2,8,9,4556,2,2,11,24,65,20,10,1,1,8254,96,207,152,205,490,8,50,5,70,5,1,62,3,2,2,10,1,48,32,94,8,7,1,183,29,8,33,75,36,2,532,2,88,31,975,3],\"fontFamily\":\"Segoe UI\",\"fontWeight\":\"bold\",\"color\":\"random-dark\",\"minSize\":0,\"weightFactor\":0.01215641250759776,\"backgroundColor\":\"white\",\"gridSize\":0,\"minRotation\":-0.7853981633974483,\"maxRotation\":0.7853981633974483,\"shuffle\":true,\"rotateRatio\":0.4,\"shape\":\"circle\",\"ellipticity\":0.65,\"figBase64\":null,\"hover\":null},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el,x){\\n                        console.log(123);\\n                        if(!iii){\\n                          window.location.reload();\\n                          iii = False;\\n\\n                        }\\n  }\",\"data\":null}]}}</script>\n```\n\n:::\n:::\n\n\n\n\n\n# Review\n\nAs you saw in this script, R has a lot of functions. We started of figuring how to set our file path so R knows where to look for files. We loaded the data from a .RData file and we listed all the objects in R's environment.\n\n* `setwd()` set working directory\n* `load()` load R objects saved in a .RData file\n* `ls()` list objects in the R environment\n\nR, of course, has all the basic math operations that you might need to do with a set of numbers. Like\n\n* `sqrt()`\n* `log()`, note that `log()` is the natural log as it is in most mathematical programming languages\n* `round()` round to the nearest integer\n* `abs()` absolute value\n* `length()` number of elements in a collection\n* `cumsum()` cumulative sum\n* `sum()`, `mean()`, `median()`, `min()`, `max()`\n\nThen we worked through some basic functions to work with R objects.\n\n* `c()` combine numbers and other R objects together in a collection\n* `nrow()`, `ncol()`\n* `head()`, `tail()`\n\nWhen working with datasets, we covered all the standard functions needed to manipulate data.\n\n* `slice()`, `slice_max()`, `slice_min()` pick out rows by there position in the dataset or by the max/min values\n* `filter()` pick out rows based on a logical expression about what is in that row\n* `select()` pick out columns by name\n* `count()` count the number of rows in a dataset or the number of rows in a dataset by groups\n* `mutate()` create new columns or edit existing columns\n* `str_sub()` extract substrings from a string\n* `case_match()` used inside `mutate()` to create new columns based on the values in another column \n* `group_by()`, `summarize()`, `reframe()` used to summarize data by groups\n* `arrange()` sort rows in a dataset\n\nWe also covered some more advanced functions.\n\n* `grepl()` search for patterns in text\n* `summary()` get a summary of a dataset or any set of numbers\n* `sort()` sort a collection of numbers\n* `unlist()` remove the list structure from a list\n* `names()` get the names of the elements in a collection\n* `as.numeric()` convert objects to numbers, we specifically converted logical values to 1s and 0s\n* `strsplit()` split a string into a list of substrings\n\nAnd we made some graphics too.\n\n* `barplot()` create a bar plot\n* `wordcloud2()` create a word cloud\n\nIn addition we even created our own new functions!\n\n* `mostCommon()` find the most common value in a collection\n* `mostCommonType()` find the most common tag in a string containing semi-colon separated tags\n\nBefore looking at the solutions, try out the exercises for yourself. All the skills you will be learning build on the fundamentals presented in this script. It would be a good idea to go through this a second time to make sure you understand everything.\n\n\n# Solutions to the exercises \n1. What is the date of the protest in line 10000 of the dataset?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   slice(10000) |>\n   select(Date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Date\n1 2018-03-24\n```\n\n\n:::\n:::\n\n\n\n\n2. Which protest type is in line 4289 of the dataset?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   slice(4289) |>\n   select(Tags)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                  Tags\n1 International; For Palestine; Israel\n```\n\n\n:::\n:::\n\n\n\n\n3. How many protests occurred in your home state?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(state == \"CA\") |>\n   count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     n\n1 4439\n```\n\n\n:::\n:::\n\n\n\n\n4. Where did the protest in the last row of the full dataset occur?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   select(state, Location) |>\n   tail(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      state          Location\n38096    CA San Francisco, CA\n```\n\n\n:::\n:::\n\n\n\n\n5. Which state had the most protests?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   count(state) |>\n   slice_max(n, \n             with_ties = TRUE) # in case of ties\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state    n\n1    CA 4439\n```\n\n\n:::\n:::\n\n\n\n\n\n6. Which state had the least protests?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   count(state) |>\n   slice_min(n, with_ties = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state n\n1 Space 1\n```\n\n\n:::\n:::\n\n\n\n\n7. Which state had the most civil rights protests?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(civilrights==1) |>\n   count(state) |>\n   slice_max(n, with_ties = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state    n\n1    CA 1424\n```\n\n\n:::\n:::\n\n\n\n\n8. Create a new column that is 1 if the protest has the tag 'Against pandemic intervention'\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest <- dataProtest |>\n   mutate(pandemic = as.numeric(grepl(\"Against pandemic intervention\", Tags)))\n```\n:::\n\n\n\n\n9. Which state had the most protests against pandemic interventions?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   filter(pandemic == 1) |>\n   count(state) |>\n   slice_max(n, with_ties = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state   n\n1    CA 227\n```\n\n\n:::\n:::\n\n\n\n\n10. Are civil rights protests larger on average than non-civil rights protests?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataProtest |>\n   group_by(civilrights) |>\n   summarize(mean(Attendees, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  civilrights `mean(Attendees, na.rm = TRUE)`\n        <dbl>                           <dbl>\n1           0                          342.17\n2           1                         1113.0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Yes, civil rights protests are larger on average than non-civil rights protests.\n```\n:::\n",
    "supporting": [
      "01_Intro_to_R_protests_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"01_Intro_to_R_protests_files/libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"01_Intro_to_R_protests_files/libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"01_Intro_to_R_protests_files/libs/wordcloud2-0.0.1/wordcloud.css\" rel=\"stylesheet\" />\n<script src=\"01_Intro_to_R_protests_files/libs/wordcloud2-0.0.1/wordcloud2-all.js\"></script>\n<script src=\"01_Intro_to_R_protests_files/libs/wordcloud2-0.0.1/hover.js\"></script>\n<script src=\"01_Intro_to_R_protests_files/libs/wordcloud2-binding-0.2.1/wordcloud2.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}