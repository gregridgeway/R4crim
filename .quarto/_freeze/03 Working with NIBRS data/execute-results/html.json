{
  "hash": "d29df654e7a6bc4a03e4bc6c1f75c7b9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to NIBRS\"\nformat: \n  html:\n    toc: true\n    html-math-method: mathjax\n    css: styles.css\nnumber-sections: true\neditor: source\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n# National Incident-Based Reporting System\n\nThe FBI established the Uniform Crime Reporting (UCR) Program in 1930 to generate reliable crime statistics for law enforcement administration, operation, and management. It has been the primary source of crime data in the United States for decades.\n\nThe UCR's Summary Reporting System (SRS) is the best known component of the UCR. About 18,000 law enforcement agencies, including municipal police departments, sheriff's departments, campus police, transit police, park police, and many other agencies, reported monthly counts of Part 1 crimes (murder and non-negligent manslaughter, forcible rape, robbery, aggravated assault, burglary, larceny theft, motor vehicle theft, and arson), often called \"index crimes.\" The SRS also tracked monthly counts of Part II crimes, such as simple assault, fraud, vandalism, drug offenses, and driving under the influence. Even though reporting to the SRS was voluntary, almost all law enforcement agencies reported their data, offering fairly comprehensive coverage of crimes reported to the police in the United States.\n\nWhile the UCR SRS has provided valuable crime data for many years, it has several notable limitations. The SRS focused on a limited number of crimes, potentially overlooking important details and emerging trends. With SRS data researchers cannot separate out trends in shootings, identity theft, and cybercrimes. Shootings, for example, are lumped together in an aggravated assault category that includes a range of serious assaults like striking someone with a beer bottle. The SRS also operated under the \"Hierarchy Rule,\" reporting only the most severe offense in a multi-offense incident. Lastly, the SRS only collected aggregate counts, meaning that detailed information about the context of the crimes, such as the characteristics of the victims and offenders, the extent of property loss or damage, the time, place, and context of the crime, and the relationships between these crime features is lost.\n\nThe FBI introduced the National Incident-Based Reporting System (NIBRS) in the 1980s. NIBRS aimed to address the shortcomings of the SRS by capturing incident-level data and a comprehensive description of what happened in each incident. Unlike the SRS, NIBRS collects data on each individual crime incident, capturing detailed information about the offenses, victims, offenders, property, and arrestees. NIBRS records data on 52 \"Group A\" offenses and 10 \"Group B\" offenses, covering a broader spectrum of criminal activity. It did away with the Hierarchy Rule and collects data on all offenses within a single incident, providing a fuller picture of criminal activity. Because NIBRS is incident-based, we have full access to the multivariate relationships between features of crime incidents.\n\nOn January 1, 2021, the FBI officially retired the SRS marking a significant transition towards the exclusive use of the National Incident-Based Reporting System for crime data collection and reporting. Although the transition has been planned for almost a decade, many law enforcement agencies are yet to transition their information systems to report to NIBRS. As of this writing, four of the nation's largest states, California, New York, Pennsylvania, and Florida, essentially do not participate in NIBRS. The largest law enforcement agencies in those states regularly post crime data to their local open data portals, but you will not find those data in NIBRS yet. The transition to NIBRS also makes the study of long-term national crime trends challenging. Any study that spans the SRS-NIBRS transition will have to grapple with inconsistencies and gaps in data as agencies adapt to the new system.\n\nThe FBI accepts data from law enforcement agencies through March of the following year. That is, the FBI accepted NIBRS data for 2023 through March 2024. Some crimes committed in December 2023, for example, may be solved or result in an arrest in April 2024. Such a case would not get marked as \"cleared\" in the NIBRS data since the clearance came after the NIBRS 2023 submission end date. Crimes in January 2023 may seem to be solved at a higher rate than crimes in December 2023 because of the March 2024 censoring. This is a feature of the data that simply requires care. Lastly, like the SRS, NIBRS only has data on those crimes reported to the police and reporting rates can vary greatly by type of crime.\n\nIn this document, you will walk through running the nibrs.R script, which processes NIBRS data from 2023. The steps will cover reading the dataset, segmenting data by type (e.g., offenders, victims), and performing some exploration of the NIBRS data.\n\n# Acquiring the data\n\nThe complete NIBRS data are available from the FBI's Crime Data Explorer [downloads page](https://cde.ucr.cjis.gov/LATEST/webapp/#/pages/downloads) under the Master File Downloads section heading. from the dropdown menu select \"National Incident-Based Reporting System (NIBRS). The compressed data file, `nibrs-2023.zip`, is over 500 Mb so downloading will take some time. It has over 73 million rows of data. Unzip `nibrs-2023.zip`. It is very big... about 6 Gb. I then run `gzip 2023_NIBRS_NATIONAL_MASTER_FILE.TXT` from the Terminal pane in RStudio (not the Console pane, the Terminal pane is typically one tab to the right of the Console pane).\n\nLet's start by peeking at a few lines of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscan(\"2023_NIBRS_NATIONAL_MASTER_FILE.txt.gz\",\n     nlines=5, what=\"\", sep=\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"BH50AK0010100000000000000                ANCHORAGE                     AK1C941Y         3030020A         00028502600  39000000000000000000      000000000000000000      000000000000000000      000000000000000000      000000000  002023NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN020            \"\n[2] \"BH50AK0010200000000000000        20210101FAIRBANKS                     AK4 941Y         3030020AA        00003196100 258000000000000000000      000000000000000000      000000000000000000      000000000000000000      00000000012122023NYNNYNNYNNYNNYNNYNNYNNYNNYNNYNNYNNYN090            \"\n[3] \"0150AK001020023000003    20230101 11010010100    N                                      N\"                                                                                                                                                                                                   \n[4] \"0250AK001020023000003    2023010123DCN  04               88\"                                                                                                                                                                                                                                 \n[5] \"0350AK001020023000003    20230101775000000150                                                         \"                                                                                                                                                                                      \n```\n\n\n:::\n:::\n\n\nAs you can see the data are not pretty. This data is in \"fixed-width format\". Rather than separate each column of data with a delimiter (like a comma or tab), all of the data fields are placed side by side. This is a legacy format that has some benefits. First, there is no need to store delimiters. This is less important these days with cheap data storage, but storing delimiters in a dataset this size requires about 1 Gb... just to store a bunch of commas. Instead the data comes with a separate file that describes which columns of text correspond to different columns of data. The following table shows the first five rows of the NIBRS offense segment in the included `NIBRS Records Description updated.xlsx` file.\n\n| Positions | Field Length and Type | Field Name                              | \n|-----------|-----------------------|-----------------------------------------|\n| 1-2       | A2                    | SEGMENT LEVEL                           |\n| 3-4       | N2                    | NUMERIC STATE CODE                      |\n| 5-13      | A9                    | ORIGINATING AGENCY IDENTIFIER (ORI)     |\n| 14-25     | A12                   | INCIDENT NUMBER                         |\n| 26-33     | A8                    | INCIDENT DATE                           |\n| 34-36     | A3                    | UCR OFFENSE CODE\t\t\t               |\n| ...       | ...                   | ...                                     |\n\nThe table tells us that for offense segments, the first two characters represent the segment level, characters 3 and 4 capture the state numeric code, characters 5-13 capture the ORI (a unique identifier for a law enforcement agency), and so one. The second column describes the data type, (A)lphanumeric or (N)umeric, and the width (number of characters) of the data field. Let's start by discussing the segment level. The NIBRS data is more complex than an already complex fixed-width format data file. The NIBRS data involves several data tables, separate tables for offenses, victims, offenders, property, and arrests. The data file we just loaded interleaves all of these tables. Note that the fourth row of the data we scanned in starts with \"02\" that signals that the rest of that row describes an offense and its format will align with the formatting table shown here. Since characters 3-4 are \"50\" we know from the format table that this number represents the state with code \"50,\" which turns out to be Alaska. The next nine characters (AK0010200) is the ORI code for the law enforcement agency that reported the offense, which turns out to be the Fairbanks Police Department. If we look further to the right in that fourth row of data to characters 26-33 we get \"20230101,\" which is the data of the criminal incident, January 1, 2023. And the three characters after the date give the offense code \"23D,\" which is the code for theft from a building. \n\nThis interpretation only works for lines of data with the first two characters equal to \"02\". The others are\n\n| Segment code | Segment type |\n|--------------|--------------|\n|BH | batch header|\n|01 | administrative|\n|02 | offenses|\n|03 | property|\n|04 | victims|\n|05 | offender|\n|06 | arrestee|\n|07 | Group B arrests|\n|W1 | Incomplete admin    |\n|W2 | Incomplete property |\n|W3 | Incomplete arrest   |\n\nWe will read each of these in and explore what they contain. The W1, W2, and W3 are \"window segments\" and represent a partial reporting. These are relatively rare records and mostly relate to arrests or recovered property related to offenses that do not appear in the 02 segment, most likely because the agency transitioned to NIBRS between the offense and the recovery/arrest.\n\n# Reading in the data\nHere's the strategy that we will use to read in the data. The data might be too big to read in all at once and still have computer memory available to clean and organize the data. Instead of reading all of it in, we are going to read in one million rows at a time. We will then examine the first two characters of each row and split rows of data by those first two characters. In this way, all the offense records will be together, and all the victims records will be together, and so one. Then we will write out all the records into segment specific files. Our computers will then have a separate file for each of the NIBRS segments.\n\nFirst I set up `infile` to connect to the large NIBRS data file, opening it in (r)ead model. Next I set up eight files, one for each of the segments, creating them in (w)rite mode to be gzip'd (compressed) as they are created. Then I set up a while-loop to continue to read one million lines at a time as long as there are more rows of data to read in. Within the loop I use `split()` to separate the lines of data I have read in based on the first two characters of the line. I combine the few window segments with the similar complete records (e.g. window segment on property goes with the rest of the property data). Lastly, inside the loop I write out the new batch of data, appending them to existing data from previous iterations of the while-loop. Closing all the files makes sure that all the read and write buffers get flushed to the data files and the connections are closed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set the file we want to 'r'ead\ninfile  <- file(\"2023_NIBRS_NATIONAL_MASTER_FILE.txt.gz\",'r')\n# create the files we are going to 'w'rite\noutfile <- list(\"01\"=gzfile(\"2023-01.txt.gz\", 'w'),\n                \"02\"=gzfile(\"2023-02.txt.gz\", 'w'),\n                \"03\"=gzfile(\"2023-03.txt.gz\", 'w'),\n                \"04\"=gzfile(\"2023-04.txt.gz\", 'w'),\n                \"05\"=gzfile(\"2023-05.txt.gz\", 'w'),\n                \"06\"=gzfile(\"2023-06.txt.gz\", 'w'),\n                \"07\"=gzfile(\"2023-07.txt.gz\", 'w'),\n                \"BH\"=gzfile(\"2023-BH.txt.gz\", 'w'))\n\n# read in 1,000,000 lines at a time\ncLines <- 0\nwhile ((length(a <- readLines(infile, n=1000000)) >  0))\n{\n  # split up what we read based on first two characters BH, 01, 02, ...\n  b <- split(a, substring(a,1,2))\n\n  # combine window segments with the associated segments\n  b[[\"01\"]] <- c(b[[\"01\"]],b[[\"W1\"]]) # administrative\n  b[[\"03\"]] <- c(b[[\"03\"]],b[[\"W3\"]]) # property\n  b[[\"06\"]] <- c(b[[\"06\"]],b[[\"W6\"]]) # arrestees\n  b[c(\"W1\",\"W3\",\"W6\")] <- NULL # drop the W1, W3, W6\n\n  # write each segment to its own file\n  for(iSegment in names(b))\n  {\n    writeLines(b[[iSegment]], con=outfile[[iSegment]])\n  }\n}\nclose(infile)\nfor(iSegment in 1:8)\n{\n  close(outfile[[iSegment]])\n}\n```\n:::\n\n\n\n\n\n<!-- # NIBRS incident level data on all Group A offenses -->\n<!-- #   arson, assault, burglary, counterfeiting, vandalism, drugs, extortion -->\n<!-- #   fraud, gambling, homicide, human trafficking, kidnapping, theft,  -->\n<!-- #   motor vehicle theft, obscene material, prostitution, robbery, sex offenses, -->\n<!-- #   weapons -->\n<!-- # Arrest only data for Group B offenses -->\n<!-- #   bad checks, curfew, loitering, disorderly conduct, DUI, non-violent, family  -->\n<!-- #   offenses, peeping tom, trespassing -->\n\n<!-- # map showing NIBRS coverage  -->\n<!-- # https://bjs.ojp.gov/national-incident-based-reporting-system-nibrs -->\n<!-- # several states have minimal participation (CA, FL, PA, NY) -->\n\n<!-- # Is retail theft really rising? Kai Ryssdal and Livi Burdette, Sep 11, 2023 -->\n<!-- # https://www.marketplace.org/2023/09/11/is-retail-theft-really-rising/ -->\n\n<!-- length(a) -->\n<!-- a[1:5] -->\n\n<!-- # create a table of the first two characters in 'a' -->\n<!-- # this can take about a minute -->\n<!-- table(substring(a,1,2)) -->\n\n<!-- # if run on the full data -->\n<!-- #      01       02       03       04       05       06       07       BH   W1  W3  W6 -->\n<!-- # 9457991 10728448 10584437 10662340 10507540  2440504  2107762    21473   27  44  99 -->\n\n<!-- # BH - batch header (agency info) -->\n<!-- # crime incident data: -->\n<!-- #   01 - administrative -->\n<!-- #   02 - offenses -->\n<!-- #   03 - property losses -->\n<!-- #   04 - victims -->\n<!-- #   05 - offender -->\n<!-- #   06 - arrestee -->\n<!-- #   07 - Group B arrests -->\n<!-- #   W1, W2, W3 - incomplete 01, 03, 06 records -->\n<!-- #      these \"window\" records tend to be arrests or recovered property -->\n<!-- #      where the original crime does not appear in 02 segment, -->\n<!-- #      perhaps agency transitioned to NIBRS between crime and recovery/arrest -->\n\n<!-- a[208] # the admin segment -->\n<!-- a[209] # the offense segment -->\n<!-- a[210] # the property loss segment -->\n<!-- a[208:212] -->\n<!-- # State is Alaska (State #50) -->\n<!-- # ORI is AK0010200 -->\n<!-- # incident ID is C60BKE5M728N -->\n<!-- # date is 2022-12-24 -->\n<!-- # crime type is 23D=theft from building -->\n<!-- #    23DC means successfully completed (not simply attempted) -->\n<!-- #    A means alcohol involved -->\n<!-- #    20 is the location type (residence) -->\n<!-- #    88 means not a hate crime -->\n<!-- # property type 25 is purses/handbags/wallets -->\n<!-- # value was $300 (1=unknown, 10=drugs) -->\n<!-- # recovery date would be there if recovered -->\n\n<!-- # STRATEGY -->\n<!-- # 1. group the lines of data by first two characters -->\n<!-- # 2. save each segment to a separate file -->\n<!-- # 3. read in each segment file in turn, separating data elements into columns -->\n\n\n\n\n<!-- # split the dataset into different components based on type (victim, offenders, etc.) -->\n<!-- b <- split(a, substring(a,1,2)) -->\n\n<!-- # combine identically formatted segments -->\n<!-- b[[\"01\"]] <- c(b[[\"01\"]],b[[\"W1\"]]) # administrative -->\n<!-- b[[\"03\"]] <- c(b[[\"03\"]],b[[\"W3\"]]) # property -->\n<!-- b[[\"06\"]] <- c(b[[\"06\"]],b[[\"W6\"]]) # arrestees -->\n<!-- b[9:11] <- NULL # drop the W1, W3, W5 -->\n\n\n<!-- # b[[2]] is all the offense data -->\n<!-- b[[2]][1:5] -->\n<!-- # b[[4]] is all the victim data -->\n<!-- b[[4]][1:5] -->\n\n\n\n\n\n\n\n<!-- rm(a,b) # removes the very large objects -->\n<!-- gc()    # \"garbage collection\" free up memory no longer needed -->\n\n\n<!-- ```{r} -->\n<!-- library(readxl) -->\n<!-- library(readr) -->\n<!-- library(dplyr) -->\n<!-- library(tidyr) -->\n<!-- ``` -->\n\n\n\n<!-- # check that all character positions are accounted for -->\n<!-- #   just a helper function to double check our work -->\n<!-- checkPositions <- function(x) -->\n<!-- { -->\n<!--     # 1-5 into 1,2,3,4,5 -->\n<!--     x <- unlist(sapply(parse(text=gsub(\"-\",\":\",x)), eval)) -->\n<!--     # check that all values are there and none are duplicated -->\n<!--     return( length(setdiff(1:max(x),x))==0  && -->\n<!--             !any(duplicated(x)) ) -->\n<!-- } -->\n<!-- checkPositions(list(\"1-3\",\"4-5\",\"6-7\")) # this covers 1-7, yeah! -->\n<!-- checkPositions(list(\"1-3\",\"3-5\",\"6-7\")) # this overlaps at 3, bad! -->\n<!-- checkPositions(list(\"1-3\",\"6-7\"))       # this skips 4-5, whoops! -->\n\n\n<!-- # read in fixed-width format information for batch headers -->\n<!-- #  excel file is included in the zip file when downloaded -->\n<!-- fmt <- read_excel(\"NIBRS Records Description updated.xlsx\", -->\n<!--                   skip=4) |> -->\n<!--        data.frame() |> -->\n<!--        filter(!is.na(Position) &  -->\n<!--               !(Position %in% c(\"106-225\", # data on county can repeat 5x -->\n<!--                                 \"234-269\", # indicators for 12 months -->\n<!--                                 \"234\",\"235\",\"236\", # detailed January reporting -->\n<!--                                 \"270-284\"))) # county codes up to 5x -->\n<!-- fmtCol <- fmt$Type..Length -->\n<!-- fmtType <- ifelse(substring(fmtCol,1,1)==\"A\", \"c\", \"n\") -->\n<!-- fmtWidth <- substring(fmtCol,2) |> as.numeric() -->\n<!-- fmtNames <- strsplit(fmt$Description, split = \" - \", fixed = TRUE) |> -->\n<!--                sapply(head, n=1) -->\n<!-- checkPositions(fmt$Position) -->\n\n<!-- # read in the data from fixed width format -->\n<!-- #    R also has a read.fwf() function but it is very slow -->\n<!-- nibrsBH <- read_fwf(\"2022-BH.txt.gz\", -->\n<!--                     col_positions = fwf_widths(fmtWidth), -->\n<!--                     col_type=paste(fmtType,collapse=\"\")) |> -->\n<!--            data.frame() -->\n<!-- names(nibrsBH) <- make.names(fmtNames) # make.names() cleans up names -->\n\n\n<!-- # Load the ORI look up table with details on each agency -->\n<!-- load(\"ORI lookup.RData\") -->\n<!-- ORIlookup |> filter(ORI9==\"NY0303000\") # NYPD -->\n<!-- ORIlookup |> filter(ORI9==\"PAPEP0000\") # Philly PD -->\n\n<!-- # look up Pennsylvania campus police departments -->\n<!-- ORIlookup |> -->\n<!--   filter(AGENCYSAMPTYPE==\"(611) 4-year University/College\" & -->\n<!--          STATE==\"PA\") -->\n\n<!-- table(nibrsBH$STATE.ABBREVIATION) -->\n<!-- hist(nibrsBH$CURRENT.POPULATION...1.) -->\n\n<!-- nibrsBH |> -->\n<!--   filter(ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"NY0303000\") # NYPD -->\n<!-- nibrsBH |> -->\n<!--   filter(ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"CA0194200\") # LAPD -->\n<!-- # Note no reporting to NIBRS in January-December columns -->\n<!-- nibrsBH |> -->\n<!--   filter(ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"TN0190100\") # Nashville PD -->\n<!-- # Filed every month -->\n<!-- # NYN means did not file 0 crimes report, filed group A/B offenses, no window -->\n\n<!-- nibrsBH |> -->\n<!--   filter(ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"PAPEP0000\") # PPD -->\n<!-- nibrsBH |> -->\n<!--   filter(ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"PA0510400\") # Penn Police -->\n\n<!-- # Miami agencies -->\n<!-- nibrsBH |> -->\n<!--   filter(CITY.NAME==\"MIAMI\" & STATE.ABBREVIATION==\"FL\") |> -->\n<!--   select(ORIGINATING.AGENCY.IDENTIFIER..ORI.) -->\n\n<!-- # we could link up all these ORIs \"by hand\"... or left-join() -->\n<!-- nibrsBH |> -->\n<!--   filter(CITY.NAME==\"MIAMI\" & STATE.ABBREVIATION==\"FL\") |> -->\n<!--   left_join(ORIlookup, -->\n<!--             by=join_by(ORIGINATING.AGENCY.IDENTIFIER..ORI.==ORI9)) |> -->\n<!--   print(max=10000) -->\n<!-- # Miccosukee Tribal Police reported 12 months, Miami PD only 9 months  -->\n\n\n\n<!-- # Exercises -->\n<!-- # 1. Find the ORI codes for agencies reporting crimes in Philadelphia, PA -->\n\n\n\n<!-- # 2. Use the ORIlookup to find out more about these agencies -->\n\n\n\n\n\n\n\n\n\n<!-- # read in Excel file with data formatting information -->\n<!-- fmtXL <- read_excel(\"NIBRS Records Description updated.xlsx\", -->\n<!--                     sheet = \"INCIDENT RECORD\", -->\n<!--                     range = \"A5:D819\") |> -->\n<!--          data.frame() -->\n\n<!-- # read in incident administrative data -->\n<!-- # select only the rows for admin segment -->\n<!-- i <- grep('LEVEL \"02\"', fmtXL$Data.Field.Number) -->\n<!-- fmt <- fmtXL |> -->\n<!--   slice(3:(i-3)) |> -->\n<!--   filter(!is.na(Position) & -->\n<!--          !(Position %in% c(\"59-88\"))) # up to 10 UCR codes -->\n<!-- fmtCol <- fmt$Type..Length -->\n<!-- fmtType <- substring(fmtCol,1,1) -->\n<!-- fmtType <- ifelse(substring(fmtCol,1,1)==\"A\", \"c\", \"n\") -->\n<!-- fmtWidth <- substring(fmtCol,2) |> as.numeric() -->\n<!-- fmtNames <- strsplit(fmt$Description, split = \" - \", fixed = TRUE) |> -->\n<!--                sapply(head, n=1) -->\n<!-- checkPositions(fmt$Position) -->\n\n\n<!-- nibrsAdmin01 <- read_fwf(\"2022-01.txt.gz\", -->\n<!--                          col_positions = fwf_widths(fmtWidth), -->\n<!--                          col_type=paste(fmtType,collapse=\"\")) |> -->\n<!--                 data.frame() -->\n<!-- names(nibrsAdmin01) <- make.names(fmtNames) -->\n\n<!-- # examine incident we looked at earlier -->\n<!-- #   Important! incident number is only unique within agency -->\n<!-- nibrsAdmin01 |> filter(INCIDENT.NUMBER==\"C60BKE5M728N\") -->\n\n<!-- ORIlookup |> filter(ORI9==\"AK0010200\") -->\n<!-- nibrsAdmin01 |>  -->\n<!--   filter(INCIDENT.NUMBER==\"C60BKE5M728N\" & -->\n<!--          ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"AK0010200\") -->\n<!-- # we will use this incident as an example through the remaining datasets -->\n\n<!-- # read in Group A offense data -->\n<!-- #   Group A crimes are mostly crimes against a person or property -->\n<!-- #      https://bjs.ojp.gov/sites/g/files/xyckuh236/files/media/document/offensea_offenseb.pdf -->\n<!-- #      - seriousness of offense -->\n<!-- #      - frequency of its occurrence -->\n<!-- #      - prevalence nationwide -->\n<!-- #      - probability the offense comes to police attention -->\n<!-- #      - law enforcement is the best channel for collecting data -->\n<!-- #      - burden placed on law enforcement to collect data -->\n<!-- #      - validity and usefulness of the collected data -->\n<!-- #      - legitimate general interest in offense -->\n<!-- #   May not have an arrest -->\n<!-- # select only the rows for offense segment -->\n<!-- i <- grep('LEVEL \"02\"', fmtXL$Data.Field.Number) -->\n<!-- j <- grep('LEVEL \"03\"', fmtXL$Data.Field.Number) -->\n<!-- fmt <- fmtXL |> -->\n<!--   slice((i+1):(j-3)) |> -->\n<!--   filter(!is.na(Position) & -->\n<!--          !(Position %in% c(\"38-40\",\"46-48\",\"49-57\"))) -->\n\n<!-- fmtCol <- fmt$Type..Length -->\n<!-- fmtType <- ifelse(substring(fmtCol,1,1)==\"A\", \"c\", \"n\") -->\n<!-- fmtWidth <- substring(fmtCol,2) |> as.numeric() -->\n<!-- fmtNames <- strsplit(fmt$Description, split = \" - \", fixed = TRUE) |> -->\n<!--               sapply(head,n=1) -->\n<!-- checkPositions(fmt$Position) -->\n\n<!-- nibrsCrm02 <- read_fwf(\"2022-02.txt.gz\", -->\n<!--                        col_positions = fwf_widths(fmtWidth), -->\n<!--                        col_type=paste(fmtType,collapse=\"\")) |> -->\n<!--               data.frame() -->\n<!-- names(nibrsCrm02) <- make.names(fmtNames) -->\n\n<!-- # incident numbers are unique *within* agency. Same ID in different ORIs are -->\n<!-- #   different incidents -->\n<!-- nibrsCrm02 |>  -->\n<!--   filter(INCIDENT.NUMBER==\"C60BKE5M728N\" & -->\n<!--          ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"AK0010200\") -->\n<!-- # 2022-12-24 in Fairbanks, AK -->\n<!-- # attempted robbery (120), burglary (220), auto theft (240) -->\n<!-- # completed agg assault (13A), theft from vehicle (23F), stolen property (280),  -->\n<!-- #           property destruction (290), drug paraphernalia (35B) -->\n<!-- # occurred on a road (13) and rental storage facility (19) -->\n<!-- # weapons involved blunt object (30) and hands/feet (40) -->\n\n\n<!-- # Exercises -->\n<!-- # 1. How many crimes are reported to the Philadelphia PD? -->\n\n\n\n<!-- # 2. What is the most common crime types reported to Philadelphia PD? -->\n\n\n\n\n\n<!-- # read in property data -->\n<!-- # select only the rows for property segment -->\n<!-- i <- grep('LEVEL \"03\"', fmtXL$Data.Field.Number) -->\n<!-- j <- grep('LEVEL \"04\"', fmtXL$Data.Field.Number) -->\n<!-- fmt <- fmtXL |> -->\n<!--   slice((i+2):(j-3)) |> -->\n<!--   filter(!is.na(Position) &  -->\n<!--          !(Position %in% c(\"14-22\",\"20-22\",\"58-102\",\"58-72\",\"103-132\"))) -->\n<!-- fmtCol <- fmt$Type..Length -->\n<!-- fmtType <- ifelse(substring(fmtCol,1,1)==\"A\", \"c\", \"n\") -->\n<!-- fmtWidth <- substring(fmtCol,2) |> as.numeric() -->\n<!-- fmtNames <- strsplit(fmt$Description, split = \" - \", fixed = TRUE) |> -->\n<!--               sapply(head, n=1) -->\n<!-- checkPositions(fmt$Position) -->\n\n<!-- # there are two columns called \"ESTIMATED.QUANTITY\" -->\n<!-- #   second one represents thousandths of the first column -->\n<!-- fmtNames -->\n<!-- fmtNames[which(fmtNames==\"ESTIMATED QUANTITY\")[2]] <- \"ESTIMATED.QUANTITY.1000THS\" -->\n\n<!-- nibrsProp03 <- read_fwf(\"2022-03.txt.gz\", -->\n<!--                         col_positions = fwf_widths(fmtWidth), -->\n<!--                         col_type=paste(fmtType,collapse=\"\")) |> -->\n<!--                data.frame() -->\n<!-- names(nibrsProp03) <- make.names(fmtNames) -->\n\n<!-- nibrsProp03 |>  -->\n<!--   filter(INCIDENT.NUMBER==\"C60BKE5M728N\" & -->\n<!--          ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"AK0010200\") -->\n<!-- # property was (7) stolen, a (25) purse/handbag/wallet, value totals $300 -->\n<!-- # not recovered -->\n\n\n<!-- # read in victim data -->\n<!-- # select only the rows for victim segment -->\n<!-- i <- grep('LEVEL \"04\"', fmtXL$Data.Field.Number) -->\n<!-- j <- grep('LEVEL \"05\"', fmtXL$Data.Field.Number) -->\n<!-- fmt <- fmtXL |> -->\n<!--   slice((i+1):(j-3)) |> -->\n<!--   filter(!is.na(Position) & -->\n<!--          !(Position %in% c(\"37-66\",\"74-77\",\"79-83\",\"84-123\"))) -->\n<!-- fmtCol <- fmt$Type..Length -->\n<!-- fmtType <- ifelse(substring(fmtCol,1,1)==\"A\", \"c\", \"n\") -->\n<!-- fmtWidth <- substring(fmtCol,2) |> as.numeric() -->\n<!-- fmtNames <- strsplit(fmt$Description, split = \" - \", fixed = TRUE) |> -->\n<!--                sapply(head, n=1) -->\n<!-- checkPositions(fmt$Position) -->\n\n<!-- nibrsVic04 <- read_fwf(\"2022-04.txt.gz\", -->\n<!--                         col_positions = fwf_widths(fmtWidth), -->\n<!--                         col_type=paste(fmtType,collapse=\"\")) |> -->\n<!--               data.frame() -->\n<!-- names(nibrsVic04) <- make.names(fmtNames) -->\n\n<!-- nibrsVic04 |> -->\n<!--   filter(INCIDENT.NUMBER==\"C60BKE5M728N\" & -->\n<!--          ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"AK0010200\") -->\n<!-- # victim was an (I) individual, age 20, (M) male, (A) Asian/Pacific Islander -->\n<!-- #   (N) not Hispanic, (R) legal resident, (NE) victim was neighbor of offender -->\n\n\n<!-- # read in offender data -->\n<!-- # select only the rows for offender segment -->\n<!-- i <- grep('LEVEL \"05\"', fmtXL$Data.Field.Number) -->\n<!-- j <- grep('LEVEL \"06\"', fmtXL$Data.Field.Number) -->\n<!-- fmt <- fmtXL |> -->\n<!--   slice((i+1):(j-3)) |> -->\n<!--   filter(!is.na(Position)) -->\n<!-- fmtCol <- fmt$Type..Length -->\n<!-- fmtType <- ifelse(substring(fmtCol,1,1)==\"A\", \"c\", \"n\") -->\n<!-- fmtWidth <- substring(fmtCol,2) |> as.numeric() -->\n<!-- fmtNames <- strsplit(fmt$Description, split = \" - \", fixed = TRUE) |> -->\n<!--                sapply(head, n=1) -->\n<!-- checkPositions(fmt$Position) -->\n\n<!-- nibrsOff05 <- read_fwf(\"2022-05.txt.gz\", -->\n<!--                        col_positions = fwf_widths(fmtWidth), -->\n<!--                        col_type=paste(fmtType,collapse=\"\")) -->\n<!-- problems(nibrsOff05) -->\n<!-- # problem rows (for some reason) are rounded to the nearest 10! -->\n<!-- nibrsOff05[7307045:7307055,] |> data.frame() -->\n<!-- scan(\"2022-05.txt.gz\", what=\"\", skip=7307045, n=10, sep=\"\\n\") -->\n\n<!-- # read in all fields as character -->\n<!-- nibrsOff05 <- read_fwf(\"2022-05.txt.gz\", -->\n<!--                        col_positions = fwf_widths(fmtWidth), -->\n<!--                        col_type=\"cccccccccc\") |> -->\n<!--               data.frame() -->\n<!-- names(nibrsOff05) <- make.names(fmtNames) -->\n\n<!-- # let's see what the problem is -->\n<!-- table(nibrsOff05$OFFENDER.SEQUENCE.NUMBER) -->\n<!-- i <- which(nibrsOff05$OFFENDER.SEQUENCE.NUMBER==\"##\") -->\n<!-- nibrsOff05$OFFENDER.SEQUENCE.NUMBER[i] <- NA -->\n<!-- nibrsOff05 |> -->\n<!--   filter(INCIDENT.NUMBER==\"RD-0WOZW0OZT\" & -->\n<!--          ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"NY0558000\") -->\n\n<!-- nibrsOff05 |>  -->\n<!--   filter(INCIDENT.NUMBER==\"C60BKE5M728N\" & -->\n<!--          ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"AK0010200\") -->\n<!-- # offender is 30 yo, Asian, male -->\n\n\n<!-- # read in arrestee data -->\n<!-- #  If reporting agency arrests an offender for the reported offense after  -->\n<!-- #  submitting the initial report, the agency should submit the Arrestee -->\n<!-- #  Segment(s) as an update to the initial report  -->\n<!-- #    https://le.fbi.gov/file-repository/nibrs-user-manual.pdf -->\n<!-- #  Submission date cuts off on March 15 of subsequent year -->\n<!-- # select only the rows for victim segment -->\n<!-- i <- grep('LEVEL \"06\"', fmtXL$Data.Field.Number) -->\n<!-- j <- grep('LEVEL \"07\"', fmtXL$Data.Field.Number) -->\n<!-- fmt <- fmtXL |> -->\n<!--   slice((i+2):(j-3)) |> -->\n<!--   filter(!is.na(Position) &  -->\n<!--          !(Position %in% c(\"61-66\",\"75-104\"))) -->\n<!-- fmtCol <- fmt$Type..Length -->\n<!-- fmtType <- ifelse(substring(fmtCol,1,1)==\"A\", \"c\", \"n\") -->\n<!-- fmtWidth <- substring(fmtCol,2) |> as.numeric() -->\n<!-- fmtNames <- strsplit(fmt$Description, split = \" - \", fixed = TRUE) |> -->\n<!--                sapply(head, n=1) -->\n<!-- checkPositions(fmt$Position) -->\n\n<!-- nibrsArr06 <- read_fwf(\"2022-06.txt.gz\", -->\n<!--                        col_positions = fwf_widths(fmtWidth), -->\n<!--                        col_type=paste(fmtType,collapse=\"\")) |> -->\n<!--               data.frame() -->\n<!-- names(nibrsArr06) <- make.names(fmtNames) -->\n\n<!-- nibrsArr06 |>  -->\n<!--   filter(INCIDENT.NUMBER==\"C60BKE5M728N\" & -->\n<!--          ORIGINATING.AGENCY.IDENTIFIER..ORI.==\"AK0010200\") -->\n<!-- # no arrest made -->\n\n\n<!-- # read in Group B arrestee data -->\n<!-- #   Group B are almost all crimes against Society -->\n<!-- #     - Bad Checks, NonViolent Family Offenses,  -->\n<!-- #       Curfew/Loitering/Vagrancy Violations, Liquor Law Violations,  -->\n<!-- #       Disorderly Conduct, Peeping Tom, DUI, Trespassing, Drunkenness -->\n<!-- #   Only reported if there's an arrest -->\n<!-- # select only the rows for Group B arrests segment -->\n<!-- i <- grep('LEVEL \"07\"', fmtXL$Data.Field.Number) -->\n<!-- fmt <- fmtXL |> -->\n<!--   slice(-(1:i)) |> -->\n<!--   filter(!is.na(Position) & -->\n<!--          !(Position %in% \"44-49\")) -->\n<!-- fmtCol <- fmt$Type..Length -->\n<!-- fmtType <- ifelse(substring(fmtCol,1,1)==\"A\", \"c\", \"n\") -->\n<!-- fmtWidth <- substring(fmtCol,2) |> as.numeric() -->\n<!-- fmtNames <- strsplit(fmt$Description, split = \" - \", fixed = TRUE) |> -->\n<!--                sapply(head, n=1) -->\n<!-- checkPositions(fmt$Position) -->\n\n<!-- nibrsArB07 <- read_fwf(\"2022-07.txt.gz\", -->\n<!--                        col_positions = fwf_widths(fmtWidth), -->\n<!--                        col_type=paste(fmtType,collapse=\"\")) |> -->\n<!--               data.frame() -->\n<!-- names(nibrsArB07) <- make.names(fmtNames) -->\n\n<!-- save(nibrsBH, nibrsAdmin01, nibrsCrm02, nibrsProp03, nibrsVic04, nibrsOff05, -->\n<!--      nibrsArr06, nibrsArB07,  -->\n<!--      fmt, fmtXL, ORIlookup, -->\n<!--      file=\"nibrs2022.RData\", -->\n<!--      compress = TRUE) -->\n<!-- # if you ever want to reload the data, no need to rerun all the previous steps -->\n<!-- #   just use load(\"nibrs2022.RData\") to retrieve the data -->\n<!-- #   It's quite large so it can take a few minutes to reload -->\n\n\n<!-- ############################################################################# -->\n<!-- # which states seem to have good reporting -->\n<!-- ############################################################################# -->\n<!-- # which states have good enrollment -->\n<!-- with(nibrsBH, table(STATE.ABBREVIATION, AGENCY.NIBRS.FLAG,exclude=NULL)) -->\n\n<!-- table(nibrsBH$NUMBER.OF.MONTHS.REPORTED) -->\n<!-- a <- with(nibrsBH,  -->\n<!--           table(STATE.ABBREVIATION, NUMBER.OF.MONTHS.REPORTED)) -->\n<!-- sort(a[,\"00\"]/a[,\"12\"]) -->\n\n<!-- # examine those not reporting -->\n<!-- nibrsBH |> filter(STATE.ABBREVIATION==\"RI\" &  -->\n<!--                   NUMBER.OF.MONTHS.REPORTED==\"00\") -->\n<!-- # Exeter - agency no longer reporting, covered by RIRSP0900 (NORTH KINGSTOWN) -->\n<!-- # Block Island - didn't report for town of 1,000 -->\n<!-- ORIlookup |> filter(ORI9 %in% c(\"RI0050800\",\"RI0050900\")) -->\n\n\n<!-- nibrsBH |> -->\n<!--   filter(is.na(COVERED.BY.ORI)) |> -->\n<!--   group_by(STATE.ABBREVIATION, AGENCY.NIBRS.FLAG) |>  -->\n<!--   count() |> -->\n<!--   pivot_wider(names_from = AGENCY.NIBRS.FLAG, values_from = n) |> -->\n<!--   print(n=Inf) -->\n\n<!-- nibrsBH |> -->\n<!--   filter(STATE.ABBREVIATION==\"CO\" &  -->\n<!--            NUMBER.OF.MONTHS.REPORTED==\"00\" & -->\n<!--            is.na(COVERED.BY.ORI)) -->\n\n\n<!-- # Example: What percentage of burglaries result in an arrest? -->\n<!-- #   arrest data go through March 15 of subsequent year -->\n<!-- nibrsCrm02 |> -->\n<!--   filter(UCR.OFFENSE.CODE==\"220\" &  -->\n<!--            OFFENSE.ATTEMPTED.COMPLETED==\"C\") |> -->\n<!--   count() -->\n\n\n<!-- a <- nibrsCrm02 |> -->\n<!--   filter(UCR.OFFENSE.CODE==\"220\" &  -->\n<!--            OFFENSE.ATTEMPTED.COMPLETED==\"C\") |> -->\n<!--   select(ORIGINATING.AGENCY.IDENTIFIER..ORI.,  -->\n<!--          INCIDENT.NUMBER) |> -->\n<!--   left_join(nibrsArr06, -->\n<!--             by = join_by(ORIGINATING.AGENCY.IDENTIFIER..ORI., -->\n<!--                          INCIDENT.NUMBER)) -->\n<!-- nrow(a) -->\n<!-- # note some incidents have multiple arrestees -->\n\n<!-- a |>  -->\n<!--   group_by(ORIGINATING.AGENCY.IDENTIFIER..ORI.,  -->\n<!--            INCIDENT.NUMBER) |> -->\n<!--   summarize(arrest=any(!is.na(ARREST.DATE)),  -->\n<!--             .groups = \"drop\") |> -->\n<!--   summarize(mean(arrest)) -->\n\n\n<!-- # all together now -->\n<!-- nibrsCrm02 |> -->\n<!--   filter(UCR.OFFENSE.CODE==\"220\" &  -->\n<!--            OFFENSE.ATTEMPTED.COMPLETED==\"C\") |> -->\n<!--   select(ORIGINATING.AGENCY.IDENTIFIER..ORI.,  -->\n<!--          INCIDENT.NUMBER) |> -->\n<!--   left_join(nibrsArr06, -->\n<!--             by = join_by(ORIGINATING.AGENCY.IDENTIFIER..ORI., -->\n<!--                          INCIDENT.NUMBER)) |>  -->\n<!--   group_by(ORIGINATING.AGENCY.IDENTIFIER..ORI.,  -->\n<!--            INCIDENT.NUMBER) |> -->\n<!--   summarize(arrest=any(!is.na(ARREST.DATE)),  -->\n<!--             .groups = \"drop\") |> -->\n<!--   summarize(mean(arrest)) -->\n\n\n\n\n\n\n\n\n\n<!-- # Exercises, NIBRS shooting data -->\n<!-- # 1. Look up the ORI code for your hometown. If not, from the US, choose any -->\n<!-- #    city or town.  -->\n<!-- #   - Does your town report to NIBRS?  -->\n<!-- #   - If reporting, how many crimes were reported from your hometown? -->\n\n\n<!-- # 2. How many offenses are shootings. That is, involved  -->\n<!-- #      - aggravated assault (13A) -->\n<!-- #      - offense was completed (C) -->\n<!-- #      - gun involved (11, 12, 13, 14, 15) -->\n\n\n<!-- # 3. What is the race distribution of shooting victims? -->\n\n\n<!-- # 4. How many cases are recorded as justifiable homicides? -->\n\n\n\n\n<!-- # 20 = Criminal Killed by Private Citizen -->\n<!-- # 21 = Criminal Killed by Police Officer -->\n\n<!-- # A = Criminal Attacked Police Officer and That Officer Killed Criminal -->\n<!-- # B = Criminal Attacked Fellow Police Officer and Criminal Killed by Another Police Officer -->\n<!-- # C = Criminal Attacked a Civilian -->\n<!-- # D = Criminal Attempted Flight From a Crime -->\n<!-- # E = Criminal Killed In Commission of a Crime -->\n<!-- # F = Criminal Resisted Arrest -->\n<!-- # G = Unable to Determine/Not Enough Information -->\n\n<!-- # Note: other data shows total fatal police shooting victims is about 1,000/year -->\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}