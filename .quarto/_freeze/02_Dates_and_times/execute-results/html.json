{
  "hash": "4bd07dec2066e125a6f6de13c3178085",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dates and Times\"\nauthor:\n- affiliation: University of Pennsylvania\n  email: gridge@upenn.edu\n  name: Greg Ridgeway\n- affiliation: University of Pennsylvania\n  email: moyruth@sas.upenn.edu\n  name: Ruth Moyer\ndate: \"July 29, 2025\"\nformat:\n  html:\n    theme: \n      dark: darkly\n      light: default\n    toc: true\n    html-math-method: mathjax\n  pdf:\n    toc: true\nprefer-html: true\nnumber-sections: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n<!-- In terminal -->\n<!-- quarto render 02_Dates_and_times.qmd -->\n\n<!-- git commit 02-* -m \"commit message\" -->\n<!-- git status -->\n<!-- git push -->\n\n\n\n<!-- A function for automating the numbering and wording of the exercise questions -->\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n# Introduction\n\nWorking with dates and times is a lot different than working with the more familiar numbers. Months have different number of days. Sometimes we count hours of the day up to 12 and then start over. Sometimes we count hours up to 24 and then start over. Some years have 366 days. We have 24 times zones around the world. Twice a year we switch clocks for Daylight Saving Time, except in some places like Arizona. Arithmetic, such as adding one month to a date, is poorly defined. Which date is one month after January 31st? Is it February 28th? Or is it March 3rd?\n\nFortunately, software for working with dates exist to make these tasks easier. Unfortunately, every system seems to make their own design decisions. Excel stores dates as the number of days since January 0, 1900... that's not a typo... they count from January 0, 1900. Linux systems count days since January 1, 1970. SPSS stores times as the number of seconds since midnight October 14, 1582, the adoption date of the Gregorian calendar. Much of the world did not adopt the calendar in 1582. The American colonies did not adopt the Gregorian calendar until 1752 along with Great Britain. So beware if you are a historian digging through centuries old data. Aligning dates can become very messy.\n\nR has had a variety of attempts at providing a means for managing dates. We are going to use the [`lubridate`](https://www.jstatsoft.org/article/view/v040i03) package that address just about everything you might need to do with dates and times.\n\nDo not use `as.Date()`. `lubridate` has an easier to read date formatting, more intelligently handles dates of different formats, and has better date arithmetic.\n\n`lubridate` is not part of R by default. You will need to install it. Simply run\n```\ninstall.packages(\"lubridate\")\n```\nand R will hit the web, download the `lubridate` package and any supporting packages it needs (and it does need a few), and installs them. This is a one time event. Once you have `lubridate` on your machine you will not need to reinstall it every time you need it.\n\nSome of our students, particularly on Macs, have encountered trouble installing some packages for R. R will sometimes try to download the source code for the packages and compile them from scratch on your machine. Sometimes that goes well and other times it requires that you have other tools installed on your machine. An easy solution is to run\n```\ninstall.packages(\"lubridate\", type=\"mac.binary\")\n```\ninstead to insist that R finds and installs a ready-to-use version of the packages.\n\n\n# Working with dates\nWhile `lubridate` is now installed, once per R session you will need to load `lubridate`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(dplyr)\n```\n:::\n\n\n\nIf you close R and restart it, then you'll need to run this line again.\n\nLet's reload the [sample of Chicago crime data](https://github.com/gregridgeway/R4criminology/blob/master/chicago%20crime%2020141124-20141209.RData) discussed in the introductory notes, available on the [R4Crim github site](https://github.com/gregridgeway/R4crim).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"chicago crime 20141124-20141209.RData\")\n```\n:::\n\n\n\n\nLet's extract five dates from the `chicagoCrime` dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicagoCrime |>\n   select(Date) |>\n   slice(c(1,2500,5000,7500,10000))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    Date\n1 12/09/2014 11:54:00 PM\n2 12/05/2014 11:00:00 PM\n3 12/02/2014 10:58:00 AM\n4 11/28/2014 02:35:00 PM\n5 11/24/2014 12:30:00 AM\n```\n\n\n:::\n:::\n\n\n\nAs you can see the dates include the date in month/day/year format and the time on a 12 hour AM/PM clock. R has no idea that these values represent dates. You are familiar with this date formatting, but R just thinks they are strings of characters. Use `substring()` to just extract the date part, the first 10 characters of `Date`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntextDate <- chicagoCrime |>\n   select(Date) |>\n   mutate(Date = substring(Date, 1, 10)) |>\n   slice(c(1,2500,5000,7500,10000)) |>\n   pull(Date)\ntextDate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"12/09/2014\" \"12/05/2014\" \"12/02/2014\" \"11/28/2014\" \"11/24/2014\"\n```\n\n\n:::\n:::\n\n\n\n\nNow let's use the `mdy()` function from the `lubridate` package to tell R that these are not just strings of characters, but they actually represent months, days, and years.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- mdy(textDate)\nis(b)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"     \"oldClass\"\n[1] \"2014-12-09\" \"2014-12-05\" \"2014-12-02\" \"2014-11-28\" \"2014-11-24\"\n```\n\n\n:::\n:::\n\n\n\n`b` now stores those five dates in a format that recognizes the month, day, and year. `is(b)` tells us that R is storing `b` as a date. There are different functions for other date formats depending on the ordering of the day, month and year, like `dmy()` and `ymd()` and even `mdy_hms()` for month, day, year, hours, minutes, seconds format.\n\nNow that R knows these are dates, the `lubridate` package provides a lot of functions to help you work with dates.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear(b)\nmonth(b)\nmonth(b, label=TRUE)\nmonth(b, label=TRUE, abbr=FALSE)\nwday(b, label=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2014 2014 2014 2014 2014\n[1] 12 12 12 11 11\n[1] Dec Dec Dec Nov Nov\n12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\n[1] December December December November November\n12 Levels: January < February < March < April < May < June < ... < December\n[1] Tue Fri Tue Fri Mon\nLevels: Sun < Mon < Tue < Wed < Thu < Fri < Sat\n```\n\n\n:::\n:::\n\n\n\n\nSubtraction will tell you the time between two dates. How many days since December 1, 2014? How many days have passed from the values in `b` to today? The `now()` function give you the date and time, well... right now.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb - mdy(\"12/01/2014\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime differences in days\n[1]  8  4  1 -3 -7\n```\n\n\n:::\n\n```{.r .cell-code}\ndate(now()) - b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime differences in days\n[1] 3885 3889 3892 3896 3900\n```\n\n\n:::\n:::\n\n\n\n\nWhen subtracting dates, R will make a good guess for the unit of time to use in the result. Use `difftime()` if you want to be specific about the unit of time and not leave it up to R to decide.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndifftime(b, mdy(\"12/01/2014\"), units = \"days\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime differences in days\n[1]  8  4  1 -3 -7\n```\n\n\n:::\n\n```{.r .cell-code}\ndifftime(b, mdy(\"12/01/2014\"), units = \"hours\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime differences in hours\n[1]  192   96   24  -72 -168\n```\n\n\n:::\n:::\n\n\n\n\nWe can add time to the dates as well\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb + dyears(1) # adds 365 days, does not increase year by 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2015-12-09 06:00:00 UTC\" \"2015-12-05 06:00:00 UTC\"\n[3] \"2015-12-02 06:00:00 UTC\" \"2015-11-28 06:00:00 UTC\"\n[5] \"2015-11-24 06:00:00 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nb + ddays(31)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2015-01-09\" \"2015-01-05\" \"2015-01-02\" \"2014-12-29\" \"2014-12-25\"\n```\n\n\n:::\n:::\n\n\n\n\nNow let's go ahead and create a new column in our Chicago dataset containing properly stored dates.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicagoCrime <-\n   chicagoCrime |>\n   mutate(realdate = mdy_hms(Date))\n\nchicagoCrime |>\n   select(Date, realdate) |>\n   head() # show the dates in the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    Date            realdate\n1 12/09/2014 11:54:00 PM 2014-12-09 23:54:00\n2 12/09/2014 11:45:00 PM 2014-12-09 23:45:00\n3 12/09/2014 11:42:00 PM 2014-12-09 23:42:00\n4 12/09/2014 11:42:00 PM 2014-12-09 23:42:00\n5 12/09/2014 11:40:00 PM 2014-12-09 23:40:00\n6 12/09/2014 11:37:00 PM 2014-12-09 23:37:00\n```\n\n\n:::\n:::\n\n\n\n`lubridate` has converted the date and time formats to a more standardized form, one that is easier to use on a computer.\n\nThe default timezone is Coordinated Universal Time abbreviated UTC, which is the same as Greenwich Mean Time. Interestingly, the abbreviation CUT would make more sense in English, but TCU would make more sense in French, so the compromise was to universally abbreviate as UTC. Since all of these crimes occurred in Chicago, let's explicitly set the timezone to Central Time. The function `OlsonNames()` will give you a list of all possible time zones you can use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicagoCrime <-\n   chicagoCrime |>\n   mutate(realdate = force_tz(realdate, \"America/Chicago\"))\nchicagoCrime$realdate[1:5]   # show just the first five dates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2014-12-09 23:54:00 CST\" \"2014-12-09 23:45:00 CST\"\n[3] \"2014-12-09 23:42:00 CST\" \"2014-12-09 23:42:00 CST\"\n[5] \"2014-12-09 23:40:00 CST\"\n```\n\n\n:::\n:::\n\n\n\nNow when printed you can see that the timezone is set to Central Standard Time. R will automatically handle Daylight Saving Time. Note that an August date reports Central Daylight Time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdy_hms(\"8/1/2014 12:00:00\") |> \n   force_tz(\"America/Chicago\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2014-08-01 12:00:00 CDT\"\n```\n\n\n:::\n:::\n\n\n\n\nNote that `force_tz()` keeps the dates and times the same, but overwrites the timezone. If you want to lookup what the date and time would be in a different timezone, then use `with_tz()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdy_hms(\"8/1/2014 12:00:00\") |>\n   force_tz(\"America/Chicago\") |> # force to CDT\n   with_tz(\"America/New_York\")    # get time in EDT\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2014-08-01 13:00:00 EDT\"\n```\n\n\n:::\n:::\n\n\n\n\nWe can actually find out when Daylight Saving Time ends. Generate all November dates and convert them to Chicago time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdy_hms(\"11/1/2025 12:00:00\", tz=\"America/Chicago\") + ddays(0:29)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2025-11-01 12:00:00 CDT\" \"2025-11-02 11:00:00 CST\"\n [3] \"2025-11-03 11:00:00 CST\" \"2025-11-04 11:00:00 CST\"\n [5] \"2025-11-05 11:00:00 CST\" \"2025-11-06 11:00:00 CST\"\n [7] \"2025-11-07 11:00:00 CST\" \"2025-11-08 11:00:00 CST\"\n [9] \"2025-11-09 11:00:00 CST\" \"2025-11-10 11:00:00 CST\"\n[11] \"2025-11-11 11:00:00 CST\" \"2025-11-12 11:00:00 CST\"\n[13] \"2025-11-13 11:00:00 CST\" \"2025-11-14 11:00:00 CST\"\n[15] \"2025-11-15 11:00:00 CST\" \"2025-11-16 11:00:00 CST\"\n[17] \"2025-11-17 11:00:00 CST\" \"2025-11-18 11:00:00 CST\"\n[19] \"2025-11-19 11:00:00 CST\" \"2025-11-20 11:00:00 CST\"\n[21] \"2025-11-21 11:00:00 CST\" \"2025-11-22 11:00:00 CST\"\n[23] \"2025-11-23 11:00:00 CST\" \"2025-11-24 11:00:00 CST\"\n[25] \"2025-11-25 11:00:00 CST\" \"2025-11-26 11:00:00 CST\"\n[27] \"2025-11-27 11:00:00 CST\" \"2025-11-28 11:00:00 CST\"\n[29] \"2025-11-29 11:00:00 CST\" \"2025-11-30 11:00:00 CST\"\n```\n\n\n:::\n:::\n\n\n\nLooks like by 11am on November 2, 2025, Chicago is back to Central Standard Time.\n\n# Exercises\n1. At what hour does Daylight Saving Time end? (Hint: Try using `dminutes()` to add time to the date DST ends)\n2. Thanksgiving occurs on the fourth month in November. On what date will Thanksgiving fall in 2025? Hints:\n     + Try listing all dates in November\n     + Use `wday()` to get the weekday\n     + find the fourth Thursday\n3. Make a function that takes as input a year and returns the date of Thanksgiving in that year. Here's a template to start\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntday <- function(year)\n{\n\n   return( )\n}\n```\n:::\n\n\n\n\n# Solutions to the exercises \n1. At what hour does Daylight Saving Time end?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdy(\"11/2/2025\", tz=\"America/Chicago\") + dminutes(1:180)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"2025-11-02 00:01:00 CDT\" \"2025-11-02 00:02:00 CDT\"\n  [3] \"2025-11-02 00:03:00 CDT\" \"2025-11-02 00:04:00 CDT\"\n  [5] \"2025-11-02 00:05:00 CDT\" \"2025-11-02 00:06:00 CDT\"\n  [7] \"2025-11-02 00:07:00 CDT\" \"2025-11-02 00:08:00 CDT\"\n  [9] \"2025-11-02 00:09:00 CDT\" \"2025-11-02 00:10:00 CDT\"\n [11] \"2025-11-02 00:11:00 CDT\" \"2025-11-02 00:12:00 CDT\"\n [13] \"2025-11-02 00:13:00 CDT\" \"2025-11-02 00:14:00 CDT\"\n [15] \"2025-11-02 00:15:00 CDT\" \"2025-11-02 00:16:00 CDT\"\n [17] \"2025-11-02 00:17:00 CDT\" \"2025-11-02 00:18:00 CDT\"\n [19] \"2025-11-02 00:19:00 CDT\" \"2025-11-02 00:20:00 CDT\"\n [21] \"2025-11-02 00:21:00 CDT\" \"2025-11-02 00:22:00 CDT\"\n [23] \"2025-11-02 00:23:00 CDT\" \"2025-11-02 00:24:00 CDT\"\n [25] \"2025-11-02 00:25:00 CDT\" \"2025-11-02 00:26:00 CDT\"\n [27] \"2025-11-02 00:27:00 CDT\" \"2025-11-02 00:28:00 CDT\"\n [29] \"2025-11-02 00:29:00 CDT\" \"2025-11-02 00:30:00 CDT\"\n [31] \"2025-11-02 00:31:00 CDT\" \"2025-11-02 00:32:00 CDT\"\n [33] \"2025-11-02 00:33:00 CDT\" \"2025-11-02 00:34:00 CDT\"\n [35] \"2025-11-02 00:35:00 CDT\" \"2025-11-02 00:36:00 CDT\"\n [37] \"2025-11-02 00:37:00 CDT\" \"2025-11-02 00:38:00 CDT\"\n [39] \"2025-11-02 00:39:00 CDT\" \"2025-11-02 00:40:00 CDT\"\n [41] \"2025-11-02 00:41:00 CDT\" \"2025-11-02 00:42:00 CDT\"\n [43] \"2025-11-02 00:43:00 CDT\" \"2025-11-02 00:44:00 CDT\"\n [45] \"2025-11-02 00:45:00 CDT\" \"2025-11-02 00:46:00 CDT\"\n [47] \"2025-11-02 00:47:00 CDT\" \"2025-11-02 00:48:00 CDT\"\n [49] \"2025-11-02 00:49:00 CDT\" \"2025-11-02 00:50:00 CDT\"\n [51] \"2025-11-02 00:51:00 CDT\" \"2025-11-02 00:52:00 CDT\"\n [53] \"2025-11-02 00:53:00 CDT\" \"2025-11-02 00:54:00 CDT\"\n [55] \"2025-11-02 00:55:00 CDT\" \"2025-11-02 00:56:00 CDT\"\n [57] \"2025-11-02 00:57:00 CDT\" \"2025-11-02 00:58:00 CDT\"\n [59] \"2025-11-02 00:59:00 CDT\" \"2025-11-02 01:00:00 CDT\"\n [61] \"2025-11-02 01:01:00 CDT\" \"2025-11-02 01:02:00 CDT\"\n [63] \"2025-11-02 01:03:00 CDT\" \"2025-11-02 01:04:00 CDT\"\n [65] \"2025-11-02 01:05:00 CDT\" \"2025-11-02 01:06:00 CDT\"\n [67] \"2025-11-02 01:07:00 CDT\" \"2025-11-02 01:08:00 CDT\"\n [69] \"2025-11-02 01:09:00 CDT\" \"2025-11-02 01:10:00 CDT\"\n [71] \"2025-11-02 01:11:00 CDT\" \"2025-11-02 01:12:00 CDT\"\n [73] \"2025-11-02 01:13:00 CDT\" \"2025-11-02 01:14:00 CDT\"\n [75] \"2025-11-02 01:15:00 CDT\" \"2025-11-02 01:16:00 CDT\"\n [77] \"2025-11-02 01:17:00 CDT\" \"2025-11-02 01:18:00 CDT\"\n [79] \"2025-11-02 01:19:00 CDT\" \"2025-11-02 01:20:00 CDT\"\n [81] \"2025-11-02 01:21:00 CDT\" \"2025-11-02 01:22:00 CDT\"\n [83] \"2025-11-02 01:23:00 CDT\" \"2025-11-02 01:24:00 CDT\"\n [85] \"2025-11-02 01:25:00 CDT\" \"2025-11-02 01:26:00 CDT\"\n [87] \"2025-11-02 01:27:00 CDT\" \"2025-11-02 01:28:00 CDT\"\n [89] \"2025-11-02 01:29:00 CDT\" \"2025-11-02 01:30:00 CDT\"\n [91] \"2025-11-02 01:31:00 CDT\" \"2025-11-02 01:32:00 CDT\"\n [93] \"2025-11-02 01:33:00 CDT\" \"2025-11-02 01:34:00 CDT\"\n [95] \"2025-11-02 01:35:00 CDT\" \"2025-11-02 01:36:00 CDT\"\n [97] \"2025-11-02 01:37:00 CDT\" \"2025-11-02 01:38:00 CDT\"\n [99] \"2025-11-02 01:39:00 CDT\" \"2025-11-02 01:40:00 CDT\"\n[101] \"2025-11-02 01:41:00 CDT\" \"2025-11-02 01:42:00 CDT\"\n[103] \"2025-11-02 01:43:00 CDT\" \"2025-11-02 01:44:00 CDT\"\n[105] \"2025-11-02 01:45:00 CDT\" \"2025-11-02 01:46:00 CDT\"\n[107] \"2025-11-02 01:47:00 CDT\" \"2025-11-02 01:48:00 CDT\"\n[109] \"2025-11-02 01:49:00 CDT\" \"2025-11-02 01:50:00 CDT\"\n[111] \"2025-11-02 01:51:00 CDT\" \"2025-11-02 01:52:00 CDT\"\n[113] \"2025-11-02 01:53:00 CDT\" \"2025-11-02 01:54:00 CDT\"\n[115] \"2025-11-02 01:55:00 CDT\" \"2025-11-02 01:56:00 CDT\"\n[117] \"2025-11-02 01:57:00 CDT\" \"2025-11-02 01:58:00 CDT\"\n[119] \"2025-11-02 01:59:00 CDT\" \"2025-11-02 01:00:00 CST\"\n[121] \"2025-11-02 01:01:00 CST\" \"2025-11-02 01:02:00 CST\"\n[123] \"2025-11-02 01:03:00 CST\" \"2025-11-02 01:04:00 CST\"\n[125] \"2025-11-02 01:05:00 CST\" \"2025-11-02 01:06:00 CST\"\n[127] \"2025-11-02 01:07:00 CST\" \"2025-11-02 01:08:00 CST\"\n[129] \"2025-11-02 01:09:00 CST\" \"2025-11-02 01:10:00 CST\"\n[131] \"2025-11-02 01:11:00 CST\" \"2025-11-02 01:12:00 CST\"\n[133] \"2025-11-02 01:13:00 CST\" \"2025-11-02 01:14:00 CST\"\n[135] \"2025-11-02 01:15:00 CST\" \"2025-11-02 01:16:00 CST\"\n[137] \"2025-11-02 01:17:00 CST\" \"2025-11-02 01:18:00 CST\"\n[139] \"2025-11-02 01:19:00 CST\" \"2025-11-02 01:20:00 CST\"\n[141] \"2025-11-02 01:21:00 CST\" \"2025-11-02 01:22:00 CST\"\n[143] \"2025-11-02 01:23:00 CST\" \"2025-11-02 01:24:00 CST\"\n[145] \"2025-11-02 01:25:00 CST\" \"2025-11-02 01:26:00 CST\"\n[147] \"2025-11-02 01:27:00 CST\" \"2025-11-02 01:28:00 CST\"\n[149] \"2025-11-02 01:29:00 CST\" \"2025-11-02 01:30:00 CST\"\n[151] \"2025-11-02 01:31:00 CST\" \"2025-11-02 01:32:00 CST\"\n[153] \"2025-11-02 01:33:00 CST\" \"2025-11-02 01:34:00 CST\"\n[155] \"2025-11-02 01:35:00 CST\" \"2025-11-02 01:36:00 CST\"\n[157] \"2025-11-02 01:37:00 CST\" \"2025-11-02 01:38:00 CST\"\n[159] \"2025-11-02 01:39:00 CST\" \"2025-11-02 01:40:00 CST\"\n[161] \"2025-11-02 01:41:00 CST\" \"2025-11-02 01:42:00 CST\"\n[163] \"2025-11-02 01:43:00 CST\" \"2025-11-02 01:44:00 CST\"\n[165] \"2025-11-02 01:45:00 CST\" \"2025-11-02 01:46:00 CST\"\n[167] \"2025-11-02 01:47:00 CST\" \"2025-11-02 01:48:00 CST\"\n[169] \"2025-11-02 01:49:00 CST\" \"2025-11-02 01:50:00 CST\"\n[171] \"2025-11-02 01:51:00 CST\" \"2025-11-02 01:52:00 CST\"\n[173] \"2025-11-02 01:53:00 CST\" \"2025-11-02 01:54:00 CST\"\n[175] \"2025-11-02 01:55:00 CST\" \"2025-11-02 01:56:00 CST\"\n[177] \"2025-11-02 01:57:00 CST\" \"2025-11-02 01:58:00 CST\"\n[179] \"2025-11-02 01:59:00 CST\" \"2025-11-02 02:00:00 CST\"\n```\n\n\n:::\n:::\n\n\n\nWhat happens after \"2025-11-02 01:59:00 CDT\"? You can see that it ends when the clock strikes two in the morning. If you want R to really do all the work, use `lubridate`'s `dst()` function and find the minimum and maximum times before and after the switch to daylight saving time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- data.frame(date = mdy(\"11/2/2025\", tz=\"America/Chicago\") + dminutes(1:180))\n# the latest time that is still in Daylight Saving Time\na |>\n   filter(dst(date)) |>\n   slice_max(date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 date\n1 2025-11-02 01:59:00\n```\n\n\n:::\n\n```{.r .cell-code}\n# the earliest time that is no longer in Daylight Saving Time\na |>\n   filter(!dst(date)) |>\n   slice_min(date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 date\n1 2025-11-02 01:00:00\n```\n\n\n:::\n\n```{.r .cell-code}\n# more succinctly\na |> \n   group_by(dst(date)) |>\n   summarize(min(date), max(date))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  `dst(date)` `min(date)`         `max(date)`        \n  <lgl>       <dttm>              <dttm>             \n1 FALSE       2025-11-02 01:00:00 2025-11-02 02:00:00\n2 TRUE        2025-11-02 00:01:00 2025-11-02 01:59:00\n```\n\n\n:::\n:::\n\n\n\n\n2. On what date will Thanksgiving fall in 2020?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(date=mdy(\"11/1/2025\") + ddays(0:29)) |>\n   filter(wday(date, label=TRUE) == \"Thu\") |>\n   slice(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        date\n1 2025-11-27\n```\n\n\n:::\n\n```{.r .cell-code}\n# or using some base R code\na <- mdy(paste0(\"11/\",1:30,\"/2025\"))\na[wday(a,label=TRUE)==\"Thu\"][4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-11-27\"\n```\n\n\n:::\n:::\n\n\n\n\n3. Make a function that takes as input a year and returns the date of Thanksgiving in that year.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntday <- function(year)\n{\n   data.frame(date=mdy(paste0(\"11/1/\",year)) + ddays(0:29)) |>\n      filter(wday(date, label=TRUE) == \"Thu\") |>\n      slice(4) |>\n      pull(date)\n}\ntday(2025)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-11-27\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlapply(2025:2100, tday)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"2025-11-27\"\n\n[[2]]\n[1] \"2026-11-26\"\n\n[[3]]\n[1] \"2027-11-25\"\n\n[[4]]\n[1] \"2028-11-23\"\n\n[[5]]\n[1] \"2029-11-22\"\n\n[[6]]\n[1] \"2030-11-28\"\n\n[[7]]\n[1] \"2031-11-27\"\n\n[[8]]\n[1] \"2032-11-25\"\n\n[[9]]\n[1] \"2033-11-24\"\n\n[[10]]\n[1] \"2034-11-23\"\n\n[[11]]\n[1] \"2035-11-22\"\n\n[[12]]\n[1] \"2036-11-27\"\n\n[[13]]\n[1] \"2037-11-26\"\n\n[[14]]\n[1] \"2038-11-25\"\n\n[[15]]\n[1] \"2039-11-24\"\n\n[[16]]\n[1] \"2040-11-22\"\n\n[[17]]\n[1] \"2041-11-28\"\n\n[[18]]\n[1] \"2042-11-27\"\n\n[[19]]\n[1] \"2043-11-26\"\n\n[[20]]\n[1] \"2044-11-24\"\n\n[[21]]\n[1] \"2045-11-23\"\n\n[[22]]\n[1] \"2046-11-22\"\n\n[[23]]\n[1] \"2047-11-28\"\n\n[[24]]\n[1] \"2048-11-26\"\n\n[[25]]\n[1] \"2049-11-25\"\n\n[[26]]\n[1] \"2050-11-24\"\n\n[[27]]\n[1] \"2051-11-23\"\n\n[[28]]\n[1] \"2052-11-28\"\n\n[[29]]\n[1] \"2053-11-27\"\n\n[[30]]\n[1] \"2054-11-26\"\n\n[[31]]\n[1] \"2055-11-25\"\n\n[[32]]\n[1] \"2056-11-23\"\n\n[[33]]\n[1] \"2057-11-22\"\n\n[[34]]\n[1] \"2058-11-28\"\n\n[[35]]\n[1] \"2059-11-27\"\n\n[[36]]\n[1] \"2060-11-25\"\n\n[[37]]\n[1] \"2061-11-24\"\n\n[[38]]\n[1] \"2062-11-23\"\n\n[[39]]\n[1] \"2063-11-22\"\n\n[[40]]\n[1] \"2064-11-27\"\n\n[[41]]\n[1] \"2065-11-26\"\n\n[[42]]\n[1] \"2066-11-25\"\n\n[[43]]\n[1] \"2067-11-24\"\n\n[[44]]\n[1] \"2068-11-22\"\n\n[[45]]\n[1] \"2069-11-28\"\n\n[[46]]\n[1] \"2070-11-27\"\n\n[[47]]\n[1] \"2071-11-26\"\n\n[[48]]\n[1] \"2072-11-24\"\n\n[[49]]\n[1] \"2073-11-23\"\n\n[[50]]\n[1] \"2074-11-22\"\n\n[[51]]\n[1] \"2075-11-28\"\n\n[[52]]\n[1] \"2076-11-26\"\n\n[[53]]\n[1] \"2077-11-25\"\n\n[[54]]\n[1] \"2078-11-24\"\n\n[[55]]\n[1] \"2079-11-23\"\n\n[[56]]\n[1] \"2080-11-28\"\n\n[[57]]\n[1] \"2081-11-27\"\n\n[[58]]\n[1] \"2082-11-26\"\n\n[[59]]\n[1] \"2083-11-25\"\n\n[[60]]\n[1] \"2084-11-23\"\n\n[[61]]\n[1] \"2085-11-22\"\n\n[[62]]\n[1] \"2086-11-28\"\n\n[[63]]\n[1] \"2087-11-27\"\n\n[[64]]\n[1] \"2088-11-25\"\n\n[[65]]\n[1] \"2089-11-24\"\n\n[[66]]\n[1] \"2090-11-23\"\n\n[[67]]\n[1] \"2091-11-22\"\n\n[[68]]\n[1] \"2092-11-27\"\n\n[[69]]\n[1] \"2093-11-26\"\n\n[[70]]\n[1] \"2094-11-25\"\n\n[[71]]\n[1] \"2095-11-24\"\n\n[[72]]\n[1] \"2096-11-22\"\n\n[[73]]\n[1] \"2097-11-28\"\n\n[[74]]\n[1] \"2098-11-27\"\n\n[[75]]\n[1] \"2099-11-26\"\n\n[[76]]\n[1] \"2100-11-25\"\n```\n\n\n:::\n:::\n",
    "supporting": [
      "02_Dates_and_times_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}