{
  "hash": "3dc60b66417245fd265eee1296c893cc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to SQL\"\nauthor:\n- affiliation: University of Pennsylvania\n  email: gridge@upenn.edu\n  name: Greg Ridgeway\n- affiliation: University of Pennsylvania\n  email: moyruth@upenn.edu\n  name: Ruth Moyer\n- affiliation: University of Pennsylvania\n  email: gohl@upenn.edu\n  name: Li Sian Goh\ndate: \"August 14, 2025\"\nformat:\n  html:\n    theme: \n      dark: darkly\n      light: default\n    toc: true\n    html-math-method: mathjax\n  pdf:\n    toc: true\n    prefer-html: true\nnumber-sections: true\neditor_options: \n  chunk_output_type: console\nbibliography: G:/My Drive/docs/Greg/articles/mybib.bib\n---\n\n\n\n\n<!-- In terminal -->\n<!-- quarto render 06_Introduction_to_SQL1.qmd -->\n\n<!-- git commit 06-* -m \"commit message\" -->\n<!-- git status -->\n<!-- git push -->\n\n<!-- cache the results -->\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n<!-- A function for automating the numbering and wording of the exercise questions -->\n<!-- Use \\x60 inside exercise questions for backticks -->\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n<!-- To run this, first download the latest Chicago crime data from -->\n<!-- https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-Present/ijzp-q8t2 -->\n<!-- and put the file in the current folder -->\n\n# Introduction\n\nSome datasets are far too large for R to handle by itself. Structured Query Language (\"SQL\") is a widely used international standard language for managing data stored in a relational databases management system. A relational database management system itself is an approach to managing data using a structure that can be contrasted against the 'flat file' approach we have been using thus far with R. Why use SQL? R doesn't work very well with really huge datasets. A relational database management system offers a way of storing large amounts of information more efficiently and reducing the size of the dataset that we are working with. There are numerous relational database management systems such as Oracle, Microsoft Access, and MySQL. We are going to use [SQLite](https://www.sqlite.org/index.html), which is probably the most widely deployed database system. SQLite is in your phone, car, airplanes, thermostats, and numerous appliances. We are going to hook up SQLite to R so that R can handle large datasets.\n\nThese are some basic clauses in a SQL query that we will explore:\n\nSELECT    \tfields or functions of fields\nINTO      \tresults table\nFROM      \ttables queried\nWHERE     \tconditions for selecting a record\nGROUP BY  \tlist of fields to group\nORDER BY  \tlist of fields to sort by\n\nHowever, before being able to use SQL as a tool in R, it will first be necessary to install the `sqldf` package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(sqldf)\n```\n:::\n\n\n\n\n# Getting the data into proper form\n\nWe will be working with Chicago crime data, which is accessible comma separated value (csv) format. Before we can even being learning SQL, we are going to have to do a fair bit of work to acquire the dataset, format it so that it is ready for SQLite, and then load it into the SQLite database.\n\nNavigate to the Chicago open data website to get the [data](https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-present/ijzp-q8t2). Click the \"Export\" button and select the \"CSV\" option, or directly download from [here](https://data.cityofchicago.org/api/views/ijzp-q8t2/rows.csv?accessType=DOWNLOAD)\n\nThe Chicago crime data is huge, more than 2.0 Gb. It contains over 8.3 million records on all crimes reported to the Chicago police department since 2001. R does not handle really large datasets well. By using SQL, you will learn how to more efficiently work with large datasets and learn a data language that is used absolutely everywhere.\n\nLet's use `scan()` to just peek at the first three rows of the file.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscan(what=\"\",file=\"Crimes_-_2001_to_present.csv\",nlines=5,sep=\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ID,Case Number,Date,Block,IUCR,Primary Type,Description,Location Description,Arrest,Domestic,Beat,District,Ward,Community Area,FBI Code,X Coordinate,Y Coordinate,Year,Updated On,Latitude,Longitude,Location\"                                   \n[2] \"13311263,JG503434,07/29/2022 03:39:00 AM,023XX S TROY ST,1582,OFFENSE INVOLVING CHILDREN,CHILD PORNOGRAPHY,RESIDENCE,true,false,1033,010,25,30,17,,,2022,04/18/2024 03:40:59 PM,,,\"                                                              \n[3] \"13053066,JG103252,01/03/2023 04:44:00 PM,039XX W WASHINGTON BLVD,2017,NARCOTICS,MANUFACTURE / DELIVER - CRACK,SIDEWALK,true,false,1122,011,28,26,18,,,2023,01/20/2024 03:41:12 PM,,,\"                                                            \n[4] \"12131221,JD327000,08/10/2020 09:45:00 AM,015XX N DAMEN AVE,0326,ROBBERY,AGGRAVATED VEHICULAR HIJACKING,STREET,true,false,1424,014,1,24,03,1162795,1909900,2020,05/17/2025 03:40:52 PM,41.908417822,-87.67740693,\\\"(41.908417822, -87.67740693)\\\"\"\n[5] \"11227634,JB147599,08/26/2017 10:00:00 AM,001XX W RANDOLPH ST,0281,CRIM SEXUAL ASSAULT,NON-AGGRAVATED,HOTEL/MOTEL,false,false,0122,001,42,32,02,,,2017,02/11/2018 03:57:41 PM,,,\"                                                                 \n```\n\n\n:::\n:::\n\n\n\n`scan()` is a very basic R function that reads in plain text files. We've told it to read in text (`what==\"\"`), the name of the file, to only read in 5 lines (`nlines=5`), and to start a new row whenever it reaches a line feed character (`sep=\"\\n\"`). Using `scan()` without `nlines=5` would cause R to try to read in the whole dataset and that could take a lot of time and you might run out of memory.\n\nYou can see that the first row contains the column names. The second row contains the first reported crime in the file. You can see date and time, address, crime descriptions, longitude and latitude of the crime, and other information.\n\nLet's try to load this file into a SQLite database. There are two steps. First, using `dbConnect()` we need to tell R to make a connection to a new SQLite database that we will call `chicagocrime.db`. This will be a file in your working folder that SQLite will use to store the data. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a connection to the database\ncon <- dbConnect(SQLite(), dbname=\"chicagocrime.db\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nThen using `dbWriteTable()` we tell R to read in the csv file and store its contents in a new table in the database. We will call that new table `crime`. Make sure that your path is set to the correct folder where you want the database to be stored.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write a table called \"crime\" into the SQLite database\ndbWriteTable(con, \n             \"crime\", # the new table in the database\n             \"Crimes_-_2001_to_present.csv\",\n             row.names=FALSE,\n             header=TRUE)     # first row has column names\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in connection_import_file(conn@ptr, name, value, sep, eol, skip): RS_sqlite_import: Crimes_-_2001_to_present.csv line 4 expected 22 columns of data but found 23\n```\n\n\n:::\n:::\n\n\n\nLooks like there is a problem with the dataset. SQLite was expecting 22 columns, but row 4 had 23. Notice from when we ran `scan()` earlier, the fourth row has a `\"(41.908417822, -87.67740693)\"`. SQLite thinks that these two numbers belong in two different columns instead of a single `Location` column.\n\nSQLite is very particular about the formatting of a file. It can easily read in a csv file, but this dataset has some commas in places that confuse SQLite. For example, there is a row in this file that looks like this:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"10000153,HY189345,03/18/2015 12:20:00 PM,091XX S UNIVERSITY AVE,0483,BATTERY,AGG PRO.EMP: OTHER DANG WEAPON,\\\"SCHOOL, PUBLIC, BUILDING\\\",true,false,0413,004,8,47,04B,1185475,1844606,2015,02/10/2018 03:50:01 PM,41.728740563,-87.596150779,\\\"(41.728740563, -87.596150779)\\\"\"\n```\n\n\n:::\n:::\n\n\n\n\nYou see that the location description for this crime is `\"SCHOOL, PUBLIC, BUILDING\"`. Those commas inside the quotes are going to cause SQLite problems. SQLite is going to think that `SCHOOL`, `PUBLIC`, and `BUILDING` are all separate columns rather than one columns describing the location.\n\nTo resolve this, we are going to change all the commas that separate the columns into something else besides commas, leaving the commas in elements like `\"SCHOOL, PUBLIC, BUILDING\"` alone. It does not matter what we use to separate the fields, but it should be an unusual character that would not appear anywhere else in the dataset. Popular choices in the vertical bar (`|`) and the semicolon (`;`). So let's take a slight detour to find out how to convert a comma-separated file into a semicolon separated file. \n\nYou will know if you need to convert your file if, when you try to set up your SQL database, you receive an error message about an \"extra column.\"\n\nWe are going to use a `while` loop to read in 1,000,000 rows of the our data file at a time. R can handle 1,000,000 rows. With the 1,000,000 rows read in, we will use a regular expression to replace all the commas used for separating columns with semicolons. Then we will write out the resulting cleaned up rows into a new file. It is a big file so this code can take a few minutes to run to completion.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfile  <- file(\"Crimes_-_2001_to_present.csv\", 'r')       # 'r' for 'read'\noutfile <- file(\"Crimes_-_2001_to_present-clean.csv\", 'w') # 'w' for 'write'\n\n# fix the Row #1 with the columns names\nreadLines(infile, n=1) |>\n   gsub(\",\", \";\", x=_) |> # separate with ;\n   gsub(\" \", \"\", x=_)  |> # SQL doesn't like field names with .,-,space\n   writeLines(con=outfile)\n\ncLines <- 0 # just a counter for the number of lines read\n\n# read in 1000000 lines. keep going if more than 0 lines read\nwhile ((length(a <- readLines(infile, n=1000000)) > 0))\n{\n   cLines <- cLines + length(a) # increase the line counter\n   cLines |> format(big.mark=\",\", scientific=FALSE) |> message()\n   # remove any semicolons if they are there\n   a <- gsub(\";\", \"\", a)\n   # use ?= to \"lookahead\" for paired quotes\n   a <- gsub(\",(?=([^\\\"]|\\\"[^\\\"]*\\\")*$)\", \";\", a, perl=TRUE)\n   # write the cleaned up data to storage\n   writeLines(a, con=outfile)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n1,000,000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n2,000,000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n3,000,000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n4,000,000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n5,000,000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n6,000,000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n7,000,000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n8,000,000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n8,377,991\n```\n\n\n:::\n\n```{.r .cell-code}\nclose(infile)\nclose(outfile)\n```\n:::\n\n\n\n\nNow, let's take a look at the first five lines of the new file we just created.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscan(what=\"\",file=\"Crimes_-_2001_to_present-clean.csv\",nlines=5,sep=\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ID;CaseNumber;Date;Block;IUCR;PrimaryType;Description;LocationDescription;Arrest;Domestic;Beat;District;Ward;CommunityArea;FBICode;XCoordinate;YCoordinate;Year;UpdatedOn;Latitude;Longitude;Location\"                                           \n[2] \"13311263;JG503434;07/29/2022 03:39:00 AM;023XX S TROY ST;1582;OFFENSE INVOLVING CHILDREN;CHILD PORNOGRAPHY;RESIDENCE;true;false;1033;010;25;30;17;;;2022;04/18/2024 03:40:59 PM;;;\"                                                              \n[3] \"13053066;JG103252;01/03/2023 04:44:00 PM;039XX W WASHINGTON BLVD;2017;NARCOTICS;MANUFACTURE / DELIVER - CRACK;SIDEWALK;true;false;1122;011;28;26;18;;;2023;01/20/2024 03:41:12 PM;;;\"                                                            \n[4] \"12131221;JD327000;08/10/2020 09:45:00 AM;015XX N DAMEN AVE;0326;ROBBERY;AGGRAVATED VEHICULAR HIJACKING;STREET;true;false;1424;014;1;24;03;1162795;1909900;2020;05/17/2025 03:40:52 PM;41.908417822;-87.67740693;\\\"(41.908417822, -87.67740693)\\\"\"\n[5] \"11227634;JB147599;08/26/2017 10:00:00 AM;001XX W RANDOLPH ST;0281;CRIM SEXUAL ASSAULT;NON-AGGRAVATED;HOTEL/MOTEL;false;false;0122;001;42;32;02;;;2017;02/11/2018 03:57:41 PM;;;\"                                                                 \n```\n\n\n:::\n:::\n\n\n\nYou now see that semicolons separate the columns rather than commas. That previous record that had the location description \"SCHOOL, PUBLIC, BUILDING\" now looks like this:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"10000153;HY189345;03/18/2015 12:20:00 PM;091XX S UNIVERSITY AVE;0483;BATTERY;AGG PRO.EMP: OTHER DANG WEAPON;\\\"SCHOOL, PUBLIC, BUILDING\\\";true;false;0413;004;8;47;04B;1185475;1844606;2015;02/10/2018 03:50:01 PM;41.728740563;-87.596150779;\\\"(41.728740563, -87.596150779)\\\"\"\n```\n\n\n:::\n:::\n\n\n\nNote that the commas are still there inside the quotes. Now we will be able to tell SQLite to look for semicolons to separate the columns.\n\n# Setting up the database\n\nNow that the csv file containing the data is ready, we can load it into SQLite. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# peek at the first few rows of the dataset\na <- read.table(\"Crimes_-_2001_to_present-clean.csv\",\n                sep=\";\",nrows=5,header=TRUE)\n# ask SQLite what data type it plans to use to store each column (eg number, text)\nvariabletypes <- dbDataType(con, a)\n# make sure these features are stored as TEXT\nvariabletypes[c(\"IUCR\",\"FBICode\",\"Ward\",\"District\",\"CommunityArea\")] <- \"TEXT\"\n\n# just in case you've already created a \"crime\" table, delete it\nif(dbExistsTable(con, \"crime\")) dbRemoveTable(con, \"crime\")\n# import the data file into the database\ndbWriteTable(con, \"crime\",                         # create crime table   \n             \"Crimes_-_2001_to_present-clean.csv\", # from our cleaned up file\n             row.names=FALSE,\n             header=TRUE,                          # first row has column names\n             field.types=variabletypes,            \n             sep=\";\")                              # columns separated with ;\n# does the table exist?\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"crime\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# a quick check to see if all the columns are there\ndbListFields(con,\"crime\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ID\"                  \"CaseNumber\"          \"Date\"               \n [4] \"Block\"               \"IUCR\"                \"PrimaryType\"        \n [7] \"Description\"         \"LocationDescription\" \"Arrest\"             \n[10] \"Domestic\"            \"Beat\"                \"District\"           \n[13] \"Ward\"                \"CommunityArea\"       \"FBICode\"            \n[16] \"XCoordinate\"         \"YCoordinate\"         \"Year\"               \n[19] \"UpdatedOn\"           \"Latitude\"            \"Longitude\"          \n[22] \"Location\"           \n```\n\n\n:::\n\n```{.r .cell-code}\n# disconnect from the database to finalize\ndbDisconnect(con)\n```\n:::\n\n\n\nYou will know if the database has been successfully set up if you find a chicagocrime.db file that has about 2 Gb of data in it. If the file size is 0 or really small, then you may be looking in the wrong folder or the data cleaning and import did not finish.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many gigabytes?\n(file.size(\"chicagocrime.db\")/10^9) |> \n   round(1) |>\n   format(nsmall=1, scientific=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1.9\"\n```\n\n\n:::\n:::\n\n\n\n\nOnce you have successfully set up your database, there is no reason to run these lines of code again. You should never again need to turn commas into semicolons or run `dbWriteTable()`. Instead, every time you want to work with your database, you can simply need to reconnect to the database with: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(SQLite(), dbname=\"chicagocrime.db\")\n```\n:::\n\n\n\nNote that if you are using a cloud-based backup service like iCloud, OneDrive, or Google Drive, you might need to wait until your \"db\" file has completely synced before you can access your database. For this reason I typically put my SQLite databases in a folder that does not get backed up. If I accidentally delete it, then I just rerun the code to rebuild the database.\n\n# SQL queries (`SELECT`, `WHERE`, `FROM`)\nYou have now created a database chicagocrime.db containing a table called `crime` that contains those 8 million crime records. \n\nTwo important clauses with an SQL query are `SELECT` and `FROM`. Unlike R, SQL queries are not case-sensitive and column names are not case-sensitive. So if we were to type \"SELECT\" as \"select\" or \"Description\" as \"dEsCrIpTiOn\", the SQL query would do the same thing. However, the tradition is to put SQL keywords in all uppercase to make it easier to distinguish them from table and column names.\n\nThe `SELECT` clause tells SQL which columns in particular you would like to see. The `FROM` clause simply tells SQL from which table it should pull the data. In this query, we are interested in only the `ID` and `Description` columns.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con,\n   \"SELECT ID, Description\n    FROM crime\",\n    n = 10) # just the first 10 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         ID                    Description\n1  13311263              CHILD PORNOGRAPHY\n2  13053066  MANUFACTURE / DELIVER - CRACK\n3  12131221 AGGRAVATED VEHICULAR HIJACKING\n4  11227634                 NON-AGGRAVATED\n5  13203321                     TO VEHICLE\n6  13204489                      OVER $500\n7  11695116                 UNLAWFUL ENTRY\n8  12419690 SEXUAL EXPLOITATION OF A CHILD\n9  12729745 ATTEMPT STRONG ARM - NO WEAPON\n10 12835559                     AUTOMOBILE\n```\n\n\n:::\n:::\n\n\n\n`dbGetQuery()` pulls the selected rows (first 10) from the selected columns (`ID` and `Description`). Sometimes it is preferable to get large datasets in smaller chunks using `dbSendQuery()` and `dbFetch()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- dbSendQuery(con, \"\n  SELECT ID,Description\n  FROM crime\")\n# pull the first 10 lines\ndbFetch(res, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         ID                    Description\n1  13311263              CHILD PORNOGRAPHY\n2  13053066  MANUFACTURE / DELIVER - CRACK\n3  12131221 AGGRAVATED VEHICULAR HIJACKING\n4  11227634                 NON-AGGRAVATED\n5  13203321                     TO VEHICLE\n6  13204489                      OVER $500\n7  11695116                 UNLAWFUL ENTRY\n8  12419690 SEXUAL EXPLOITATION OF A CHILD\n9  12729745 ATTEMPT STRONG ARM - NO WEAPON\n10 12835559                     AUTOMOBILE\n```\n\n\n:::\n\n```{.r .cell-code}\n# pull the next 10 lines\ndbFetch(res, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         ID                                                  Description\n1  13003649                                               FORCIBLE ENTRY\n2  13061203                                      DOMESTIC BATTERY SIMPLE\n3  13256787                                      DOMESTIC BATTERY SIMPLE\n4  13116982                                            RECKLESS HOMICIDE\n5  13364090 \"PROTECTED EMPLOYEE - HANDS, FISTS, FEET, NO / MINOR INJURY\"\n6  13376308    \"AGGRAVATED P.O. - HANDS, FISTS, FEET, NO / MINOR INJURY\"\n7     27382                                          FIRST DEGREE MURDER\n8     27547                                          FIRST DEGREE MURDER\n9   6255892                                              ARMED - HANDGUN\n10  6272641                                       STRONG ARM - NO WEAPON\n```\n\n\n:::\n\n```{.r .cell-code}\n# when finished, clear the rest of the results\ndbClearResult(res)\n```\n:::\n\n\n\n`dbClearResult(res)` tells SQLite that we are all done with this query. We have displayed the first 20 rows. SQLite is standing by with another 8 million rows to show us, but `dbClearResult(res)` tells SQLite that we are no longer interested in this query and it can clear out whatever it has stored for us.\n\nIn the previous SQL query we just asked for `ID` and `Description`. Typing out all of the column names would be tiresome, so SQL lets you use a `*` to select all the columns. If we want to look at the first 10 rows but all of the columns, we would use this query:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n  SELECT *\n  FROM crime\",\n  n = 3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Column `XCoordinate`: mixed type, first seen values of type string,\ncoercing other values of type integer\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Column `YCoordinate`: mixed type, first seen values of type string,\ncoercing other values of type integer\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Column `Latitude`: mixed type, first seen values of type string,\ncoercing other values of type real\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Column `Longitude`: mixed type, first seen values of type string,\ncoercing other values of type real\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        ID CaseNumber                   Date                   Block IUCR\n1 13311263   JG503434 07/29/2022 03:39:00 AM         023XX S TROY ST 1582\n2 13053066   JG103252 01/03/2023 04:44:00 PM 039XX W WASHINGTON BLVD 2017\n3 12131221   JD327000 08/10/2020 09:45:00 AM       015XX N DAMEN AVE 0326\n                 PrimaryType                    Description LocationDescription\n1 OFFENSE INVOLVING CHILDREN              CHILD PORNOGRAPHY           RESIDENCE\n2                  NARCOTICS  MANUFACTURE / DELIVER - CRACK            SIDEWALK\n3                    ROBBERY AGGRAVATED VEHICULAR HIJACKING              STREET\n  Arrest Domestic Beat District Ward CommunityArea FBICode XCoordinate\n1   true    false 1033      010   25            30      17            \n2   true    false 1122      011   28            26      18            \n3   true    false 1424      014    1            24      03     1162795\n  YCoordinate Year              UpdatedOn     Latitude    Longitude\n1             2022 04/18/2024 03:40:59 PM                          \n2             2023 01/20/2024 03:41:12 PM                          \n3     1909900 2020 05/17/2025 03:40:52 PM 41.908417822 -87.67740693\n                          Location\n1                               \\r\n2                               \\r\n3 \"(41.908417822, -87.67740693)\"\\r\n```\n\n\n:::\n:::\n\n\n\nIn addition to showing us the first three rows in their entirety, we get some warnings here regarding the coordinates of the crime that we will have to deal with later. The issue involves how SQL stores missing values.\n\nJust as `SELECT` filters the columns, the `WHERE` clause filters the rows. Note the use of `AND` and `OR` in the `WHERE` clause. Here we select three columns: `ID`, `Description`, and `LocationDescription`. Also, we want only rows where \n\n- the value in the `Beat` column is \"611\"\n- the value in the `Arrest` column is \"true\"\n- the value in the `ICUR` column is either \"0486\" or \"0498\"\n\nImportantly, note the use of single (not double) quotation marks in the `WHERE` line. The reason is that if we used double quotes, then R will think that the double quote signals the end of the query.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- dbGetQuery(con, \"\n    SELECT ID, Description, LocationDescription\n    FROM crime\n    WHERE ((Beat=611) AND \n          (Arrest='true')) AND\n          ((IUCR='0486') OR (IUCR='0498'))\")\n# show the first few rows of the results\nhead(a, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        ID             Description LocationDescription\n1 13248950 DOMESTIC BATTERY SIMPLE           APARTMENT\n2 13254239 DOMESTIC BATTERY SIMPLE            SIDEWALK\n3 13287327 DOMESTIC BATTERY SIMPLE           APARTMENT\n```\n\n\n:::\n:::\n\n\n\nSQL does not like column names with special characters. Only letters (first character *must* be a letter), numbers, and underscores (`_`). Column names also cannot be a SQl keyword, like SELECT or WHERE. If you happen to have a table with any special characters, like periods, hyphens, or spaces, you can \"protect\" the column name in square brackets. For example, `SELECT [incident id], [text-description], [location.description], [where]`.\n\n## Exercises\n\n1. Select records from Beat 234\n\n2. Select Beat, District, Ward, and Community Area for all \"ASSAULT\"s\n\n3. Select records on assaults from Beat 234\n\n4. Make a table of the number of assaults (IUCR 0560) by Ward\n\n# `GROUP_BY` and aggregation functions\n\nWe have already covered SQL clauses `SELECT`, `WHERE`, and `FROM`. The SQL function `COUNT(*)` and `GROUP BY` are also very useful. For example, the following query counts how many assaults (IUCR 0560) occurred by ward. `COUNT()` is a SQL \"aggregate\" function, a function that performs a calculation on a group of values and returns a single number. Other SQL aggregate functions include `AVG()`, `MIN()`, `MAX()`, and `SUM()`. This query will group all the records by `Ward` and then apply the aggregate function `COUNT()` and report that value in a column called `crimecount`. `AS` allows us to give clear column names in the results. Without the `AS crimecount` column of counts would be called `COUNT(*)`, which has several characters about which SQL will complain.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- dbGetQuery(con, \"\n   SELECT COUNT(*) AS crimecount,\n          Ward\n   FROM crime\n   WHERE IUCR='0560'\n   GROUP BY Ward\")\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   crimecount Ward\n1       29470     \n2        5294    1\n3        8084   10\n4        5069   11\n5        4269   12\n6        3845   13\n7        4248   14\n8        9540   15\n9       11296   16\n10      13640   17\n11       6116   18\n12       3539   19\n13      10769    2\n14      13080   20\n15      11463   21\n16       4336   22\n17       4078   23\n18      12580   24\n19       5298   25\n20       6472   26\n21      11677   27\n22      15108   28\n23       8886   29\n24      11755    3\n25       4443   30\n26       4497   31\n27       3240   32\n28       2999   33\n29      11092   34\n30       4457   35\n31       3727   36\n32       9332   37\n33       3418   38\n34       2929   39\n35       8537    4\n36       3728   40\n37       3227   41\n38       9674   42\n39       2185   43\n40       3163   44\n41       3609   45\n42       5186   46\n43       2689   47\n44       3954   48\n45       5184   49\n46       9245    5\n47       3320   50\n48      12902    6\n49      11773    7\n50      11697    8\n51      11710    9\n```\n\n\n:::\n:::\n\n\n\n\nThe `GROUP BY` clause is critical. If you forget it then the result is not well defined. That is, different implementations of SQL may produce different results. The rule you should remember is that \"every non-aggregated column in the `SELECT` clause should appear in the `GROUP BY` clause.\" Here `Ward` is not part of the aggregate function `COUNT()` so it must appear in the `GROUP BY` clause.\n\n## Exercises\n5. Count the number of crimes by `PrimaryType`\n\n6. Count the number of crimes resulting in arrest\n\n7. Count the number of crimes by `LocationDescription`. `LocationDescription` is the variable that tells us where (e.g., a parking lot, a barbershop, a fire station, a CTA train, or a motel) a crime occurred\n\n\n# `ORDER_BY` and `UPDATE`\n\n`MAX`, `MIN`, `SUM`, `AVG` are common (and useful) aggregating functions. The `ORDER BY` clause sorts the results for us. It is the SQL version of the `sort()` or `arrange()` functions. Here is an illustration that gives the range of beat numbers in each policing district.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT MIN(Beat) AS min_beat,\n          MAX(Beat) AS max_beat,\n          District\n   FROM crime\n   GROUP BY District\n   ORDER BY District\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   min_beat max_beat District\n1       124     2535         \n2       111     2535      001\n3       131     2232      002\n4       133     2222      003\n5       324     2514      004\n6       333     2233      005\n7       123     2424      006\n8       233     2431      007\n9       333     2411      008\n10      131     2522      009\n11      133     2534      010\n12      624     2535      011\n13      111     2525      012\n14      411     2535      014\n15      726     2533      015\n16      811     2521      016\n17      734     2523      017\n18      111     2533      018\n19      112     2533      019\n20      112     2433      020\n21     2112     2112      021\n22      214     2234      022\n23      123     2433      024\n24      725     2535      025\n25      124     2535      031\n26     1614     1614       16\n```\n\n\n:::\n:::\n\n\n\nRemember that the `GROUP BY` clause should include every element of the `SELECT` clause that is not involved with an aggregate function. We have `MIN()` and `MAX()` operating on `Beat`, but `District` is on its own and should be placed in the `GROUP BY` clause.\n\nLet's look at our `Latitude` and `Longitude` columns, which will be extremely useful for mapping data points. The following query will give unexpected results.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT MIN(Latitude)  AS min_lat,\n          MAX(Latitude)  AS max_lat,\n          MIN(Longitude) AS min_lon,\n          MAX(Longitude) AS max_lon,\n          District\n   FROM crime\n   GROUP BY District\n   ORDER BY District\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Column `max_lat`: mixed type, first seen values of type real, coercing\nother values of type string\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Column `max_lon`: mixed type, first seen values of type real, coercing\nother values of type string\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    min_lat  max_lat   min_lon   max_lon District\n1  41.69991 42.00030 -87.87742 -87.59533         \n2  36.61945  0.00000 -91.68657   0.00000      001\n3  36.61945  0.00000 -91.68657   0.00000      002\n4  36.61945  0.00000 -91.68657   0.00000      003\n5  36.61945  0.00000 -91.68657   0.00000      004\n6  36.61945  0.00000 -91.68657   0.00000      005\n7  36.61945  0.00000 -91.68657   0.00000      006\n8  36.61945  0.00000 -91.68657   0.00000      007\n9  36.61945  0.00000 -91.68657   0.00000      008\n10 36.61945  0.00000 -91.68657   0.00000      009\n11 36.61945  0.00000 -91.68657   0.00000      010\n12 36.61945  0.00000 -91.68657   0.00000      011\n13 36.61945  0.00000 -91.68657   0.00000      012\n14 36.61945  0.00000 -91.68657   0.00000      014\n15 36.61945  0.00000 -91.68657   0.00000      015\n16 36.61945  0.00000 -91.68657   0.00000      016\n17 36.61945  0.00000 -91.68657   0.00000      017\n18 36.61945  0.00000 -91.68657   0.00000      018\n19 41.80933  0.00000 -87.76791   0.00000      019\n20 41.79145  0.00000 -87.76303   0.00000      020\n21 41.83790 41.83790 -87.62192 -87.62192      021\n22 36.61945  0.00000 -91.68657   0.00000      022\n23 36.61945  0.00000 -91.68657   0.00000      024\n24 36.61945  0.00000 -91.68657   0.00000      025\n25 41.64619 42.01939 -87.93973 -87.53528      031\n26 41.98531 41.98552 -87.83047 -87.82900       16\n```\n\n\n:::\n:::\n\n\n\nWe get some strange results here. `max_lat` equal to 0.0 is on the equator! It is doubtful that Chicago reported any equatorial crimes. The problem is that we have some blank values in `Longitude` and `Latitude`. Here are some of them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"SELECT * FROM crime WHERE Longitude=''\", n=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        ID CaseNumber                   Date                   Block IUCR\n1 13311263   JG503434 07/29/2022 03:39:00 AM         023XX S TROY ST 1582\n2 13053066   JG103252 01/03/2023 04:44:00 PM 039XX W WASHINGTON BLVD 2017\n3 11227634   JB147599 08/26/2017 10:00:00 AM     001XX W RANDOLPH ST 0281\n                 PrimaryType                   Description LocationDescription\n1 OFFENSE INVOLVING CHILDREN             CHILD PORNOGRAPHY           RESIDENCE\n2                  NARCOTICS MANUFACTURE / DELIVER - CRACK            SIDEWALK\n3        CRIM SEXUAL ASSAULT                NON-AGGRAVATED         HOTEL/MOTEL\n  Arrest Domestic Beat District Ward CommunityArea FBICode XCoordinate\n1   true    false 1033      010   25            30      17            \n2   true    false 1122      011   28            26      18            \n3  false    false  122      001   42            32      02            \n  YCoordinate Year              UpdatedOn Latitude Longitude Location\n1             2022 04/18/2024 03:40:59 PM                          \\r\n2             2023 01/20/2024 03:41:12 PM                          \\r\n3             2017 02/11/2018 03:57:41 PM                          \\r\n```\n\n\n:::\n:::\n\n\n\nNote the `Latitude` and the `Longitude` columns are blank. And have a look at these\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"SELECT * FROM crime where Latitude<36.61946\", n=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    ID CaseNumber                   Date               Block IUCR PrimaryType\n1 1482   HH367441 05/13/2002 05:00:00 AM 061XX S ARTESIAN ST 0110    HOMICIDE\n2  838    G311269 05/29/2001 11:35:00 PM   059XX S MORGAN AV 0110    HOMICIDE\n3  637    G005960 01/06/2001 10:35:00 AM  014XX N HARDING ST 0110    HOMICIDE\n          Description LocationDescription Arrest Domestic Beat District Ward\n1 FIRST DEGREE MURDER               HOUSE   true    false  825      008     \n2 FIRST DEGREE MURDER            DUMPSTER   true    false  712      007     \n3 FIRST DEGREE MURDER              STREET   true    false 2535      025     \n  CommunityArea FBICode XCoordinate YCoordinate Year              UpdatedOn\n1                   01A           0           0 2002 01/28/2024 03:40:59 PM\n2                   01A           0           0 2001 01/28/2024 03:40:59 PM\n3                   01A           0           0 2001 01/28/2024 03:40:59 PM\n  Latitude Longitude                          Location\n1 36.61945 -91.68657 \"(36.619446395, -91.686565684)\"\\r\n2 36.61945 -91.68657 \"(36.619446395, -91.686565684)\"\\r\n3 36.61945 -91.68657 \"(36.619446395, -91.686565684)\"\\r\n```\n\n\n:::\n:::\n\n\n\nThe point (-91.68657, 36.61945) lands in Brandsville, Missouri, also highly unlikely locations for Chicago crime\n\nWe can tell SQLite to make the empty or missing values `NULL`, a more proper way to encode that these rows have missing coordinates. The `UPDATE` clause edits our table. R will read in `NULL` values as `NA`. After we do the update, we can rerun the `MIN()`, `MAX()` query. We can also assign `NULL` to latitudes and longitudes that are very close to 0.\n\nNote that we use `dbSendQuery()` when updating since we are not asking for any rows of data to come back to us.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- dbSendQuery(con, \"\n   UPDATE crime SET Latitude=NULL\n   WHERE (Latitude='') OR (ABS(Latitude-0.0) < 0.01) OR (Latitude < 36.7)\")\ndbClearResult(res)\nres <- dbSendQuery(con, \"\n   UPDATE crime SET Longitude=NULL\n   WHERE (Longitude='') OR (ABS(Longitude-0.0) < 0.01) OR (Longitude < -91.6)\")\ndbClearResult(res)\n```\n:::\n\n\n\n\nLet's rerun that query and check that we get more sensible results.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT MIN(Latitude)  AS min_lat,\n          MAX(Latitude)  AS max_lat,\n          MIN(Longitude) AS min_lon,\n          MAX(Longitude) AS max_lon,\n          District\n   FROM crime\n   GROUP BY District\n   ORDER BY District\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    min_lat  max_lat   min_lon   max_lon District\n1  41.69991 42.00030 -87.87742 -87.59533         \n2  41.72827 41.98740 -87.84349 -87.54925      001\n3  41.73298 41.97608 -87.70277 -87.56954      002\n4  41.71424 41.79946 -87.73941 -87.55261      003\n5  41.64467 41.79220 -87.72436 -87.52453      004\n6  41.64459 41.88693 -87.73145 -87.54348      005\n7  41.69249 42.01876 -87.77138 -87.55810      006\n8  41.66806 42.01369 -87.68723 -87.57906      007\n9  41.73453 42.01765 -87.80161 -87.55239      008\n10 41.77015 41.97645 -87.71397 -87.60282      009\n11 41.68357 41.94304 -87.74364 -87.61895      010\n12 41.77163 41.90624 -87.76332 -87.62328      011\n13 41.68544 41.96539 -87.76321 -87.60502      012\n14 41.77688 42.01938 -87.80222 -87.65657      014\n15 41.76641 41.94234 -87.77535 -87.63087      015\n16 41.78464 42.01938 -87.93457 -87.58256      016\n17 41.77950 42.01390 -87.75780 -87.66131      017\n18 41.85952 41.96879 -87.76313 -87.60136      018\n19 41.80933 41.98397 -87.76791 -87.58775      019\n20 41.79145 42.00458 -87.76303 -87.62992      020\n21 41.83790 41.83790 -87.62192 -87.62192      021\n22 41.67709 41.85572 -87.74328 -87.58965      022\n23 41.75988 42.02291 -87.79757 -87.62545      024\n24 41.83930 41.94586 -87.81648 -87.64093      025\n25 41.64619 42.01939 -87.93973 -87.53528      031\n26 41.98531 41.98552 -87.83047 -87.82900       16\n```\n\n\n:::\n:::\n\n\n\nNow we have results that are more in line with where Chicago actually is. Make it a habit to do some checks of your data before doing too much analysis.\n\nAnd what city does the following plot have the shape of?\nLet's plot the location of these crimes. Plotting all 8 million would be overkill, so let's take a random sample of 10,000 crimes. Here is a SQL query that will do that. It uses some tricks we will learn more about later including the use of `IN`, the use of subqueries (a query within a query), and `LIMIT`. Does the shape of the plot look right?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- dbGetQuery(con, \"\n   SELECT Longitude, Latitude \n   FROM crime \n   WHERE id IN (SELECT id \n                FROM crime \n                ORDER BY RANDOM() \n                LIMIT 10000)\")\n\nplot(Latitude~Longitude, data=a, \n     pch=\".\", \n     xlab=\"Longitude\", ylab=\"Latitude\")\n```\n\n::: {.cell-output-display}\n![](06_Introduction_to_SQL1_files/figure-pdf/unnamed-chunk-24-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Exercises\n\n8. Plot the longitude and latitude of all \"ASSAULT\"s for Ward 22\n\n9. What is the most common (Long,Lat) for assaults in Ward 22? Add the point to your plot using the `points()` function. `points()` simply draws a point (or sequence of points) at the specified coordinates\n\n\n# Solutions to the exercises\n\n1. Select records from Beat 234\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT *\n   FROM crime\n   WHERE Beat=234\",\n   n=5) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Column `XCoordinate`: mixed type, first seen values of type integer,\ncoercing other values of type string\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Column `YCoordinate`: mixed type, first seen values of type integer,\ncoercing other values of type string\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        ID CaseNumber                   Date                  Block IUCR\n1 13208531   JG408244 08/01/2023 12:00:00 PM 054XX S EAST VIEW PARK 0820\n2 13203370   JG415497 09/07/2023 07:30:00 PM    051XX S KENWOOD AVE 1310\n3 13207450   JG420345 09/07/2023 01:54:00 PM 054XX S BLACKSTONE AVE 0890\n4 13203210   JG415469 09/07/2023 06:30:00 PM 052XX S BLACKSTONE AVE 0890\n5 13206379   JG418537 01/01/2007 04:40:00 PM       053XX S SHORE DR 1153\n         PrimaryType                         Description LocationDescription\n1              THEFT                      $500 AND UNDER              STREET\n2    CRIMINAL DAMAGE                         TO PROPERTY           APARTMENT\n3              THEFT                       FROM BUILDING           APARTMENT\n4              THEFT                       FROM BUILDING           APARTMENT\n5 DECEPTIVE PRACTICE FINANCIAL IDENTITY THEFT OVER $ 300                    \n  Arrest Domestic Beat District Ward CommunityArea FBICode XCoordinate\n1  false    false  234      002    5            41      06     1188934\n2  false     true  234      002    4            41      14     1185980\n3  false    false  234      002    5            41      06     1186841\n4  false    false  234      002    4            41      06     1186800\n5  false    false  234      002    5            41      11           0\n  YCoordinate Year              UpdatedOn Latitude Longitude\n1     1869643 2023 09/14/2023 03:41:59 PM 41.79736 -87.58268\n2     1871242 2023 09/15/2023 03:42:23 PM 41.80182 -87.59346\n3     1869253 2023 09/15/2023 03:42:23 PM 41.79634 -87.59037\n4     1870814 2023 09/15/2023 03:42:23 PM 41.80063 -87.59047\n5           0 2007 09/16/2023 03:42:58 PM       NA        NA\n                           Location\n1  \"(41.79736226, -87.582679493)\"\\r\n2 \"(41.801820311, -87.593461583)\"\\r\n3 \"(41.796341968, -87.590367054)\"\\r\n4  \"(41.80062644, -87.590467932)\"\\r\n5                                \\r\n```\n\n\n:::\n:::\n\n\n\n\n2. Select Beat, District, Ward, and Community Area for all \"ASSAULT\"s\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT Beat, District, Ward, CommunityArea, PrimaryType\n   FROM crime\n   WHERE PrimaryType='ASSAULT'\",\n   n=5) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Beat District Ward CommunityArea PrimaryType\n1 2515      025   36            19     ASSAULT\n2 1713      017   33            14     ASSAULT\n3  631      006    6            44     ASSAULT\n4  322      003    6            69     ASSAULT\n5 1533      015   29            25     ASSAULT\n```\n\n\n:::\n:::\n\n\n\n\n3. Select records on assaults from Beat 234\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT *\n   FROM crime\n   WHERE (Beat=234) AND (PrimaryType='ASSAULT')\",\n   n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        ID CaseNumber                   Date                  Block IUCR\n1 13276965   JG502615 11/10/2023 09:00:00 AM 015XX E HYDE PARK BLVD 0560\n2 13207370   JG420456 09/10/2023 05:19:00 PM 053XX S HYDE PARK BLVD 0560\n3 13210166   JG421339 09/12/2023 01:30:00 PM        015XX E 53RD ST 0560\n4 13273166   JG499223 11/10/2023 04:39:00 PM        015XX E 53RD ST 0560\n5 13225905   JG442370 09/11/2023 04:15:00 PM    054XX S CORNELL AVE 0560\n  PrimaryType Description LocationDescription Arrest Domestic Beat District\n1     ASSAULT      SIMPLE       ATHLETIC CLUB  false    false  234      002\n2     ASSAULT      SIMPLE           APARTMENT  false    false  234      002\n3     ASSAULT      SIMPLE              STREET  false    false  234      002\n4     ASSAULT      SIMPLE  SMALL RETAIL STORE  false    false  234      002\n5     ASSAULT      SIMPLE           APARTMENT  false    false  234      002\n  Ward CommunityArea FBICode XCoordinate YCoordinate Year\n1    4            41     08A     1187293     1871488 2023\n2    5            41     08A     1188556     1870311 2023\n3    4            41     08A     1187634     1870434 2023\n4    5            41     08A     1187748     1870436 2023\n5    5            41     08A     1188178     1869513 2023\n               UpdatedOn Latitude Longitude                          Location\n1 11/18/2023 03:40:25 PM 41.80246 -87.58864 \"(41.802464238, -87.588638554)\"\\r\n2 09/18/2023 03:42:32 PM 41.79920 -87.58404 \"(41.799204348, -87.584044296)\"\\r\n3 09/20/2023 03:42:29 PM 41.79956 -87.58742 \"(41.799563873, -87.587421525)\"\\r\n4 11/18/2023 03:40:25 PM 41.79957 -87.58700   \"(41.799566646, -87.5870034)\"\\r\n5 09/30/2023 03:41:20 PM 41.79702 -87.58546 \"(41.797023613, -87.585455951)\"\\r\n```\n\n\n:::\n:::\n\n\n\n\n4. Make a table of the number of assaults (IUCR 0560) by Ward\n\nWe could select all the IUCR codes and ward with SQL and then filter and tabulate the data in R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# system.time() reports how long it takes to run the SQL query\n#   How long if we retrieve data from SQL and tabulate in R?\nsystem.time(\n{\n   data <- dbGetQuery(con, \"\n                    SELECT IUCR,Ward\n                    FROM crime\")\n   data |>\n      filter(IUCR==\"0560\") |>\n      count(Ward)\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n   2.78    2.23    5.06 \n```\n\n\n:::\n:::\n\n\n\nOr we could make SQL do all the work selecting and tabulating.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#   How long if we make SQL do all the work?\nsystem.time(\n{\n   a <- dbGetQuery(con, \"\n      SELECT COUNT(*) AS crimecount,\n             Ward\n      FROM crime\n      WHERE IUCR='0560'\n      GROUP BY Ward\")\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n   0.89    1.49    2.39 \n```\n\n\n:::\n:::\n\n\n\nGenerally, SQL will be much faster for general selecting, filtering, tabulating, and linking data.\n\n5. Count the number of crimes by `PrimaryType`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT COUNT(*) AS crimecount, \n          PrimaryType\n   FROM crime\n   GROUP BY PrimaryType\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   crimecount                       PrimaryType\n1       14354                             ARSON\n2      560071                           ASSAULT\n3     1526524                           BATTERY\n4      443249                          BURGLARY\n5        1609 CONCEALED CARRY LICENSE VIOLATION\n6       27303               CRIM SEXUAL ASSAULT\n7      952792                   CRIMINAL DAMAGE\n8       11111           CRIMINAL SEXUAL ASSAULT\n9      225607                 CRIMINAL TRESPASS\n10     384905                DECEPTIVE PRACTICE\n11          1                 DOMESTIC VIOLENCE\n12      14660                          GAMBLING\n13      13883                          HOMICIDE\n14        136                 HUMAN TRAFFICKING\n15      20050  INTERFERENCE WITH PUBLIC OFFICER\n16       5067                      INTIMIDATION\n17       7478                        KIDNAPPING\n18      15348              LIQUOR LAW VIOLATION\n19     427418               MOTOR VEHICLE THEFT\n20     762440                         NARCOTICS\n21         38                    NON - CRIMINAL\n22        190                      NON-CRIMINAL\n23          9  NON-CRIMINAL (SUBJECT SPECIFIED)\n24        942                         OBSCENITY\n25      60129        OFFENSE INVOLVING CHILDREN\n26        162          OTHER NARCOTIC VIOLATION\n27     522174                     OTHER OFFENSE\n28      70363                      PROSTITUTION\n29        215                  PUBLIC INDECENCY\n30      54573            PUBLIC PEACE VIOLATION\n31         24                         RITUALISM\n32     313479                           ROBBERY\n33      33970                       SEX OFFENSE\n34       6032                          STALKING\n35    1777761                             THEFT\n36     123924                 WEAPONS VIOLATION\n```\n\n\n:::\n:::\n\n\n\n\n6. Count the number of crimes resulting in arrest\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT COUNT(*) AS crimecount, PrimaryType\n   FROM crime\n   WHERE Arrest='true'\n   GROUP BY PrimaryType\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   crimecount                       PrimaryType\n1        1769                             ARSON\n2      113606                           ASSAULT\n3      330925                           BATTERY\n4       25340                          BURGLARY\n5        1554 CONCEALED CARRY LICENSE VIOLATION\n6        4365               CRIM SEXUAL ASSAULT\n7       62027                   CRIMINAL DAMAGE\n8         811           CRIMINAL SEXUAL ASSAULT\n9      153567                 CRIMINAL TRESPASS\n10      47726                DECEPTIVE PRACTICE\n11          1                 DOMESTIC VIOLENCE\n12      14554                          GAMBLING\n13       6659                          HOMICIDE\n14         13                 HUMAN TRAFFICKING\n15      18365  INTERFERENCE WITH PUBLIC OFFICER\n16        731                      INTIMIDATION\n17        798                        KIDNAPPING\n18      15199              LIQUOR LAW VIOLATION\n19      32501               MOTOR VEHICLE THEFT\n20     757507                         NARCOTICS\n21          6                    NON - CRIMINAL\n22         18                      NON-CRIMINAL\n23          3  NON-CRIMINAL (SUBJECT SPECIFIED)\n24        699                         OBSCENITY\n25      11627        OFFENSE INVOLVING CHILDREN\n26        108          OTHER NARCOTIC VIOLATION\n27      92239                     OTHER OFFENSE\n28      70052                      PROSTITUTION\n29        211                  PUBLIC INDECENCY\n30      34078            PUBLIC PEACE VIOLATION\n31          3                         RITUALISM\n32      28982                           ROBBERY\n33       8656                       SEX OFFENSE\n34        730                          STALKING\n35     192818                             THEFT\n36      89935                 WEAPONS VIOLATION\n```\n\n\n:::\n:::\n\n\n\n\nOr, if we were not interested in differentiating based on the `PrimaryType`, we could simply do the following:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT COUNT(*) AS crimecount\n   FROM crime\n   WHERE Arrest='true'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  crimecount\n1    2118183\n```\n\n\n:::\n:::\n\n\n\n\n7. Count the number of crimes by `LocationDescription`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"\n   SELECT COUNT(*) AS crimecount, LocationDescription\n   FROM crime\n   GROUP BY LocationDescription\n   ORDER BY crimecount DESC\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    crimecount                                     LocationDescription\n1      2188634                                                  STREET\n2      1378068                                               RESIDENCE\n3       992559                                               APARTMENT\n4       759893                                                SIDEWALK\n5       269956                                                   OTHER\n6       202933                          PARKING LOT/GARAGE(NON.RESID.)\n7       186576                                                   ALLEY\n8       167776                                      SMALL RETAIL STORE\n9       146370                              \"SCHOOL, PUBLIC, BUILDING\"\n10      140579                                              RESTAURANT\n11      135280                                        RESIDENCE-GARAGE\n12      132667                                  VEHICLE NON-COMMERCIAL\n13      124167                                 RESIDENCE PORCH/HALLWAY\n14      110654                                        DEPARTMENT STORE\n15      104657                                      GROCERY FOOD STORE\n16       93505                                             GAS STATION\n17       75140                           RESIDENTIAL YARD (FRONT/BACK)\n18       68975                            COMMERCIAL / BUSINESS OFFICE\n19       63192                                           PARK PROPERTY\n20       56098                                 CHA PARKING LOT/GROUNDS\n21       46948                                           BAR OR TAVERN\n22       44351                  PARKING LOT / GARAGE (NON RESIDENTIAL)\n23       41231                                            CTA PLATFORM\n24       40395                                           CHA APARTMENT\n25       39543                                              DRUG STORE\n26       34321                                               CTA TRAIN\n27       33028                                                    BANK\n28       30249                               \"SCHOOL, PUBLIC, GROUNDS\"\n29       29723                                             HOTEL/MOTEL\n30       27614                                       CONVENIENCE STORE\n31       27368                                                 CTA BUS\n32       25021                          CHA HALLWAY/STAIRWELL/ELEVATOR\n33       24679                                         VACANT LOT/LAND\n34       24623                                  DRIVEWAY - RESIDENTIAL\n35       22836                                         OTHER (SPECIFY)\n36       22458                                     TAVERN/LIQUOR STORE\n37       22189                               HOSPITAL BUILDING/GROUNDS\n38       18560                         POLICE FACILITY/VEH PARKING LOT\n39       17570                             RESIDENCE - PORCH / HALLWAY\n40       16296                                        AIRPORT/AIRCRAFT\n41       15488                       CHURCH/SYNAGOGUE/PLACE OF WORSHIP\n42       15153                         RESIDENCE - YARD (FRONT / BACK)\n43       14757                            GOVERNMENT BUILDING/PROPERTY\n44       14671                                                        \n45       14656                            NURSING HOME/RETIREMENT HOME\n46       14357                                      RESIDENCE - GARAGE\n47       14324                                       CONSTRUCTION SITE\n48       14182                             \"SCHOOL, PRIVATE, BUILDING\"\n49       12404                                       CURRENCY EXCHANGE\n50       12174                                      ABANDONED BUILDING\n51       10697                                               WAREHOUSE\n52       10276                             CTA GARAGE / OTHER PROPERTY\n53       10238                                           ATHLETIC CLUB\n54        8800                                            CTA BUS STOP\n55        8772                                              BARBERSHOP\n56        8705                          ATM (AUTOMATIC TELLER MACHINE)\n57        7814                                                 TAXICAB\n58        7803                                             CTA STATION\n59        7553                                SCHOOL - PUBLIC BUILDING\n60        7453                                                 LIBRARY\n61        7429                                   MEDICAL/DENTAL OFFICE\n62        7395                             HOSPITAL BUILDING / GROUNDS\n63        6892                          FACTORY/MANUFACTURING BUILDING\n64        6703                                 SCHOOL - PUBLIC GROUNDS\n65        6656                                           HOTEL / MOTEL\n66        5930                       OTHER RAILROAD PROP / TRAIN DEPOT\n67        5787                              COLLEGE/UNIVERSITY GROUNDS\n68        5627              AIRPORT TERMINAL UPPER LEVEL - SECURE AREA\n69        5615                                      VEHICLE-COMMERCIAL\n70        5333                                          CLEANING STORE\n71        5290                                    SPORTS ARENA/STADIUM\n72        4292                              \"SCHOOL, PRIVATE, GROUNDS\"\n73        4195                   POLICE FACILITY / VEHICLE PARKING LOT\n74        4051                               NURSING / RETIREMENT HOME\n75        3849                                       VACANT LOT / LAND\n76        3760                                         DAY CARE CENTER\n77        3600                                                CAR WASH\n78        3567                         OTHER COMMERCIAL TRANSPORTATION\n79        2800                                   TAVERN / LIQUOR STORE\n80        2732                                     MOVIE HOUSE/THEATER\n81        2676                          GOVERNMENT BUILDING / PROPERTY\n82        2668          AIRPORT TERMINAL LOWER LEVEL - NON-SECURE AREA\n83        2594                                         APPLIANCE STORE\n84        2351                               CHA PARKING LOT / GROUNDS\n85        2343                   CHURCH / SYNAGOGUE / PLACE OF WORSHIP\n86        1865                                     AIRPORT PARKING LOT\n87        1652                                 MEDICAL / DENTAL OFFICE\n88        1630                             AUTO / BOAT / RV DEALERSHIP\n89        1528         AIRPORT BUILDING NON-TERMINAL - NON-SECURE AREA\n90        1497                                SCHOOL - PRIVATE GROUNDS\n91        1399                       COLLEGE/UNIVERSITY RESIDENCE HALL\n92        1387                                                    AUTO\n93        1318          AIRPORT TERMINAL UPPER LEVEL - NON-SECURE AREA\n94        1309                                            FIRE STATION\n95        1304                                 JAIL / LOCK-UP FACILITY\n96        1301                      AIRPORT EXTERIOR - NON-SECURE AREA\n97        1272                                    VEHICLE - COMMERCIAL\n98        1181                          LAKEFRONT/WATERFRONT/RIVERBANK\n99        1168                                   COIN OPERATED MACHINE\n100       1153              AIRPORT TERMINAL LOWER LEVEL - SECURE AREA\n101       1133                               SCHOOL - PRIVATE BUILDING\n102       1085                                      HIGHWAY/EXPRESSWAY\n103       1076                                        FEDERAL BUILDING\n104       1012                           AIRPORT VENDING ESTABLISHMENT\n105       1003                                               POOL ROOM\n106        977                                                AIRCRAFT\n107        962                                          DELIVERY TRUCK\n108        920             AIRPORT BUILDING NON-TERMINAL - SECURE AREA\n109        910                                         ANIMAL HOSPITAL\n110        909               CTA PARKING LOT / GARAGE / OTHER PROPERTY\n111        890                      CHA HALLWAY / STAIRWELL / ELEVATOR\n112        825                                           BOWLING ALLEY\n113        761                                               PAWN SHOP\n114        749                                  SPORTS ARENA / STADIUM\n115        734                   OTHER RAILROAD PROPERTY / TRAIN DEPOT\n116        720                        FACTORY / MANUFACTURING BUILDING\n117        705                                                   HOUSE\n118        698                                         BOAT/WATERCRAFT\n119        593                          AIRPORT EXTERIOR - SECURE AREA\n120        592                                            CREDIT UNION\n121        589 \"VEHICLE - OTHER RIDE SHARE SERVICE (LYFT, UBER, ETC.)\"\n122        518                                                  BRIDGE\n123        514                      LAKEFRONT / WATERFRONT / RIVERBANK\n124        472                                         FOREST PRESERVE\n125        467 \"VEHICLE - OTHER RIDE SHARE SERVICE (E.G., UBER, LYFT)\"\n126        436                                                CEMETARY\n127        426                                VEHICLE - DELIVERY TRUCK\n128        407                                                   PORCH\n129        403                          COLLEGE / UNIVERSITY - GROUNDS\n130        395                                        SAVINGS AND LOAN\n131        382                                   MOVIE HOUSE / THEATER\n132        331                            VEHICLE - OTHER RIDE SERVICE\n133        330                                                    YARD\n134        282                                             PARKING LOT\n135        269                                    HIGHWAY / EXPRESSWAY\n136        245                                               NEWSSTAND\n137        202                               CTA TRACKS - RIGHT OF WAY\n138        174                     AIRPORT TRANSPORTATION SYSTEM (ATS)\n139        157                                       BOAT / WATERCRAFT\n140        152            AIRPORT TERMINAL MEZZANINE - NON-SECURE AREA\n141        144                                              VACANT LOT\n142        122                   COLLEGE / UNIVERSITY - RESIDENCE HALL\n143        111                                                 HALLWAY\n144        103                                            RETAIL STORE\n145         79                           CASINO/GAMBLING ESTABLISHMENT\n146         75                                                  GARAGE\n147         75                                                 GANGWAY\n148         71                                 GAS STATION DRIVE/PROP.\n149         60                                         CHA PARKING LOT\n150         51                                             CHA GROUNDS\n151         40                                                  TAVERN\n152         39                                             CHA HALLWAY\n153         35                                                BASEMENT\n154         28                                               VESTIBULE\n155         28                                                DRIVEWAY\n156         27                                               STAIRWELL\n157         27                                                   HOTEL\n158         27                                BARBER SHOP/BEAUTY SALON\n159         22                                                  OFFICE\n160         20                       VEHICLE - COMMERCIAL: TROLLEY BUS\n161         20                                                  KENNEL\n162         19                                                HOSPITAL\n163         18                                       RAILROAD PROPERTY\n164         18                                                    CLUB\n165         17         VEHICLE - COMMERCIAL: ENTERTAINMENT / PARTY BUS\n166         17                                             SCHOOL YARD\n167         13                                            LIQUOR STORE\n168         13                                    \"CTA \"\"L\"\" PLATFORM\"\n169         11                                      GARAGE/AUTO REPAIR\n170         11                                                    FARM\n171         11                                       \"CTA \"\"L\"\" TRAIN\"\n172         10                        VEHICLE-COMMERCIAL - TROLLEY BUS\n173         10            VEHICLE-COMMERCIAL - ENTERTAINMENT/PARTY BUS\n174         10                                            CTA PROPERTY\n175         10                                           CHA STAIRWELL\n176          9                                                   TRUCK\n177          9                                               CHA LOBBY\n178          7                                             WOODED AREA\n179          7                                                   MOTEL\n180          7                                                DUMPSTER\n181          6                                                TAXI CAB\n182          6                                              RIVER BANK\n183          6                                            NURSING HOME\n184          6                                                  CHURCH\n185          5                                                    LAKE\n186          4                                                 TRAILER\n187          4                                                   RIVER\n188          4                                            CHA PLAY LOT\n189          3                                                    YMCA\n190          3                                                   SEWER\n191          3                                            HORSE STABLE\n192          3                                             COACH HOUSE\n193          3                                            CHA ELEVATOR\n194          3                                           CHA BREEZEWAY\n195          2                                           ROOMING HOUSE\n196          2                                      PUBLIC HIGH SCHOOL\n197          2                                   PUBLIC GRAMMAR SCHOOL\n198          2                                                 PRAIRIE\n199          2                                     LIVERY STAND OFFICE\n200          2                                            LAUNDRY ROOM\n201          2                                     GOVERNMENT BUILDING\n202          2                                                 FACTORY\n203          2                                                ELEVATOR\n204          2                                      CTA SUBWAY STATION\n205          2                                             COUNTY JAIL\n206          2                                         CHURCH PROPERTY\n207          2                                            BANQUET HALL\n208          1                                       TRUCKING TERMINAL\n209          1                                                    ROOF\n210          1                                                POOLROOM\n211          1                                         POLICE FACILITY\n212          1                                            LOADING DOCK\n213          1                                             LIVERY AUTO\n214          1                                                  LAGOON\n215          1                                  JUNK YARD/GARBAGE DUMP\n216          1                                          FUNERAL PARLOR\n217          1                                   EXPRESSWAY EMBANKMENT\n218          1                                     CLEANERS/LAUNDROMAT\n219          1                                                   BEACH\n```\n\n\n:::\n:::\n\n\n\n\n8. Plot the longitude and latitude of all \"ASSAULT\"s for Ward 22\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- dbGetQuery(con, \"\n   SELECT Latitude, Longitude\n   FROM crime\n   WHERE PrimaryType='ASSAULT' AND Ward='22'\")\nplot(Latitude~Longitude, data=a, pch=\".\")\n```\n\n::: {.cell-output-display}\n![](06_Introduction_to_SQL1_files/figure-pdf/unnamed-chunk-34-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n9. What is the most common (Long,Lat) for assaults in Ward 22?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- dbGetQuery(con, \"\n   SELECT COUNT(*) AS crimecount,\n          Latitude, Longitude\n   FROM   crime\n   WHERE  PrimaryType='ASSAULT' AND Ward=22\n   GROUP BY Latitude, Longitude\n   ORDER BY crimecount DESC\n   LIMIT 1\")\n\nplot(Latitude~Longitude, data=a, pch=\".\")\npoints(Latitude~Longitude, \n       data=b,\n       pch=16, \n       col=\"salmon\",\n       cex=2)\n```\n\n::: {.cell-output-display}\n![](06_Introduction_to_SQL1_files/figure-pdf/unnamed-chunk-35-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  crimecount Latitude Longitude\n1        229 41.84905 -87.70883\n```\n\n\n:::\n:::\n",
    "supporting": [
      "06_Introduction_to_SQL1_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}